<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[有用网站汇总]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E6%9C%89%E7%94%A8%E7%BD%91%E7%AB%99%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[有用网站汇总CS相关教程廖雪峰的官网莫烦的机器学习教程 编程练习leetcode领扣 一些开源站点Facebook Opensource 强化学习开源项目Horizon RL plattform SimulatorsGazebo ConferencesCoRLEMBC Online coursesVideo LecturesCoursera网易云课堂 Free WebsitessimplesiteSites GoogleBlogspot/Blogger Uni BernWebmail (不断完善中)]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>knowledgebase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[待看的内容汇总]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E5%BE%85%E7%9C%8B%E7%9A%84%E5%86%85%E5%AE%B9%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[英语和德语发音管理类考试gimpinkscapelatexdreampark software 飞信设置 何炅，刘在时沙漠之花黑镜人生七年 kassenlaufbandwarentrenndings #待看书如何看一幅画西藏生死之书 #待看电影/纪录片无名之辈香水红海行动美国田园下的罪恶15:17到巴黎末代皇帝时空恋旅人一个人的一天神奇动物脉动地球《Die Verführerin Adele Spitzeder》（女骗子阿黛尔）关于爱因斯坦纪录片德雷斯顿大轰炸 资源1​德雷斯顿大轰炸 资源2国家人文历史耶鲁大学 音乐鉴赏全集Underground (1995 film))11 Iconic Serbian Films You Need to Watch Before You Go黑镜]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>knowledgebase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[应该养成的各种好习惯]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E5%BA%94%E8%AF%A5%E5%85%BB%E6%88%90%E7%9A%84%E5%90%84%E7%A7%8D%E5%A5%BD%E4%B9%A0%E6%83%AF%2F</url>
    <content type="text"><![CDATA[工作学习类不要频繁查阅邮箱，每天固定查看几次，如早、中、晚三次定期清空和存档收件箱中的邮件合理使用甘特图、Task和日程等进行任务规划 生活类健康饮食要吃早饭，如果实在来不及，可以准备酸奶和燕麦鸡蛋每次少煮，当天吃完煮鸡蛋时间不要过长，3分钟开水煮+2分钟盖盖子静置为宜，蛋黄外不要出现淡绿色硫化物吃饭时不过量饮水吃健康的食物，如橄榄等吃充足的水果和绿色蔬菜少吃膨化食品、速食和碳酸饮料不要过度饮酒和酗酒 个人卫生房间经常通风每周用吸尘器吸地每个月换床单、枕巾等床上用品勤剪指甲，手指甲剪成圆弧状，脚趾甲剪成平的，防止甲沟炎每1到3天换洗内裤内裤换下后及时清洗晾晒用过的碗筷和厨具及时清理用品用完后摆放在原位，养成习惯衣物等叠好或者挂好整齐摆放每天排便，尽量在固定的时间注意观察自己的排便情况，如果不是三型或四型便，则需要注意调整饮食和生活习惯（大便分型参见布里斯托大便分类法：LINK1 和 LINK2_图) 日常礼仪递给别人剪刀、螺丝刀等工具时，把刀把递给别人，防止划伤对方接过别人递送的上述工具时，动作缓慢，防止划伤对方如果对方是把剪刀头冲着你递过来，更要小心和缓慢，不要伤到自己过推拉门时，如果是需要推，慢慢推开，防止门后有人和伤到他过推拉门时，如果是需要拉，要防范门外的人使劲推门撞到你进出门、电梯时，礼貌的为后边来的人“挡门”公共场合不要大声喧哗以及高谈阔论、不要大声打电话公共场合不要把鞋踩在座位上听耳机音乐不要太大，一方面对耳朵不好，漏音的话还会影响周围的人洗完手之后不要用力甩，尤其不要甩到周围人身上如果要通过微信给别人银行账号，给别人文字版，不要拍张照片了事 手里拿着刀叉筷子等餐具时要小心拿好/放好，避免横握在手中，防止伤到别人，尤其是小孩子(因为大人手握刀叉自然放下时，大约是小孩子头的位置)]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>习惯</tag>
        <tag>knowledgebase</tag>
        <tag>SQN规范化建议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[好用手机app汇总]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E5%A5%BD%E7%94%A8%E6%89%8B%E6%9C%BAapp%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[以下是我经常使用的手机app（安卓）的汇总。加粗的是目前使用比较多的app。希望能给大家一点参考。 自我提升十点读书Habits习惯:记录习惯进行打卡的小app，很好用简书得到微信读书keepMiFit小米运动 社交软件微信skypeWhatsappInstagramQQ和飞信AndFetionTelegramViberFacebook 效率提升/时间管理GmailInboxFocus To-Do(疯狂番茄)Google CalendarBusiness Calendar:用于生成桌面日历插件Google remote desktop:远程控制电脑Gtasks:用于生成桌面Task插件Tasks 娱乐消遣虾米音乐Music Center（连索尼音响）Bose Connection（连Bose耳机）豆瓣:什么都有，尤其是可以标记读过的图书和看过的电影WordPress:管理wordpress制作的网站，并可以查看流量数据FlashAir: 无线存储卡连接软件 智能生活HERE WeGo: Here地图，可以下载离线地图Smart life: 控制智能灯泡等Remote: 通过手机遥控相机等设备SnoreLab: 记录晚上打呼噜情况AirMore: 通过浏览器下载手机数据 信息迭代McKinsey:麦肯锡信息TuneIN: 不错的收音机软件 消费购物支付宝AlipayAliexpress:阿里旗下的从海外购买国内物品的网站，很便宜，很多包邮，运送时间在20天左右Supercard: coop家的积分卡Migros: Migros家的积分卡H&amp;MGlobus AppWEMcDonald’s 交通出行SBB: 瑞士交通查询，包括铁路和市内交通DB Navigation: 德国铁路Mobility Switzerland: 瑞士租车公司BookingExpediaSWISS: 瑞士航空Ryanair: 瑞安廉价航空EasyJet: EasyJet廉价 银行金融TWINTTC SecurityTC MobileSwisscardIQ optionDuo Mobile 其他Chrome: 谷歌浏览器猎豹清理大师Night shift: 消除手机屏幕蓝光K-Classic：德国Kaufland公司电话卡管理Microsoft Authenticator: 用于学校提供的office365的验证]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>knowledgebase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些小贴士-激励我的句子]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E4%B8%80%E4%BA%9B%E5%B0%8F%E8%B4%B4%E5%A3%AB-%E6%BF%80%E5%8A%B1%E6%88%91%E7%9A%84%E5%8F%A5%E5%AD%90%2F</url>
    <content type="text"><![CDATA[用一张大纸规划进度利用复印的方法看书写是否足够美观从开始就准备些论文的材料先做出，再做好证书和文件及时扫描存档每天拿点时间提升专业修养掌握科学的休息方法要有接纳混乱的心态 写下最重要的20件事并选出其中五件Now is the best timing.不要等待一个更好的时机做孩子的榜样赶时间，其实也没有那么赶当回头看时，应该是笑着的人莫鉴于流水，而鉴于止水 宁静是一种规格很高的品质 抓住重点，表达自己的观点teamwork keep the team work 所有各种都是语言，音乐是语言，用五线谱记录，绘画是语言，用画作记录，人类说的语言形体的语言，编程的语言，自然的语言（自然现象）。。。。。这些所有的语言有没有一个统一的规律？ 以前有时太幼稚 年轻气盛，不professional,不过现在努力还来得及 2017 大格局 大世界]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>knowledgebase</tag>
        <tag>SQN规范化建议</tag>
        <tag>贴士</tag>
        <tag>激励</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2FIT-hello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>IT</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[KnowledgeBase-IT]]></title>
    <url>%2FKnowledgeBase-20190306-KnowledgeBase-IT%E7%96%91%E9%9A%BE%2F</url>
    <content type="text"><![CDATA[硬盘有盘符但是无法读取 “The device is not ready”尝试网上说的各种方法，主要涵盖在以下两个链接中。 Fix: The device is not ready on Windows 7, 8 and 10 How To Recover Data From Portable Hard Drive 如果均无效果，考虑恢复文件后格式化硬盘。恢复文件可以使用 EassosRecovery - 参考 WinHex (在U盘格式化问题时成功应用) DiskGenius testdisk-7.1-WIP CHKDSK is not available for RAW drivesM3 data recovery]]></content>
      <categories>
        <category>KnowledgeBase</category>
      </categories>
      <tags>
        <tag>knowledgebase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[保护环境，这些小事我们可以做]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E4%BF%9D%E6%8A%A4%E7%8E%AF%E5%A2%83%EF%BC%8C%E8%BF%99%E4%BA%9B%E5%B0%8F%E4%BA%8B%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%81%9A%2F</url>
    <content type="text"><![CDATA[保护环境看似是一个很大的话题，因为需要世界各国政府部门的推动。然而也是一个很小的话题，小到我们通过自己的努力就能做出很大的贡献。说保护环境的方法前，先说说为什么想写这样一篇文章。 想必你也看过许多关于环境污染的文章，例如《塑料污染：鲸鱼的痛苦你应该懂》, 《联合国环境署：塑料污染正在吞噬地球环境》等等。 然而最触动我的，是下边这篇2018年关于北极熊的文章《北极圈罕见32℃高温！有生之年，或许我们再也看不到北极熊了》。看完之后心里很不是滋味，希望能通过自己的努力，多为环境保护做一些贡献。也希望能有更多的人加入到有意识的保护环境的队伍中来。 现在就让我们看看，怎么从身边的小事做起保护环境吧。 通用建议 节约用水，避免水龙头一直开着 节约用电，避免人不在房间时一直开着灯 尽量避免使用一次性餐具，尤其是一次性塑料及发泡餐具。(一次性发泡餐具的危害) 不用塑料袋、塑料吸管 不乱扔废弃的塑料制品、不乱丢垃圾 积极支持和推动垃圾分类。国内这方面还需要不断完善，还有很长的路要走。不过可喜的是已经有很多组织和个人在行动了。如果你所在的城市已经在试点垃圾分类，请努力支持。在德国和瑞士，需要将玻璃瓶（透明、绿色、深色）、铁器、废纸及纸壳、PET饮用水瓶、其他塑料瓶、厨余垃圾等分类回收。在国内，如果你附近有收废品的，请继续将废纸、废瓶子、废铁等卖（送）给他们。也算是为回收做贡献了。 废弃电子产品、废电池尽量送到专业的回收点。这里边的重金属材料对环境的污染特别强烈。（同时请注意个人隐私，尽量破坏掉存储器部分） 不使用真皮毛制品。这个其实是保护动物和生态，说到底也是保护环境了。 充分利用物品 尽量发挥物品的最大价值。举个小例子，废弃的装A4打印纸的盒子我会拿来装废纸，这样再次发挥了一点盒子的价值。购物等赠送的小塑料袋或包装袋，可以留着当垃圾袋。 打印纸双面打印。作废的单面打印文件（非机密文件）可以用来当草稿纸，双面打印文件可以用来写毛笔字。 公共卫生间洗手后使用抽纸或卷纸够用即好，不要使用太多，节约用纸。 在保证卫生的前提下重复利用毛巾，可以保护环境。很多酒店也都张贴了如下图的贴士。因此，居住酒店时，如果不是特别需要每天清洁，可以出门前在门上挂上免打扰的牌子。或者按着酒店的介绍把毛巾放在指定的位置上（比如毛巾架上），这样清洁工就知道不需要更换毛巾。 特色行动 Plogging: 现在有的国家流行起来了Plogging，是瑞典语中“捡垃圾”（plocka）和“慢跑”（jogga）两个单词的合成。就是在慢跑的过程中捡垃圾，也可以组队比赛。连新华网都对此进行了报道《跑步捡垃圾，这是风靡全球的健身新潮流！》 （未完待续…持续添加…） 扩展阅读21岁荷兰少年暂停学业拯救海洋 众筹集资金英國可望大規模架設海上垃圾桶「Seabin」淨化海洋终结塑料污染，您可以做五件事]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>knowledgebase</tag>
        <tag>SQN规范化建议</tag>
        <tag>保护环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你真的应该拥有这个习惯记录app]]></title>
    <url>%2FIT-%E4%BD%A0%E7%9C%9F%E7%9A%84%E5%BA%94%E8%AF%A5%E6%8B%A5%E6%9C%89%E8%BF%99%E4%B8%AA%E4%B9%A0%E6%83%AF%E8%AE%B0%E5%BD%95app%2F</url>
    <content type="text"><![CDATA[作为一个工科生我特别喜欢整理和记录。我有不同的excel表格记录生活中的琐事以及我希望养成的习惯，可是用excel有一个弊端就是需要打开office软件，有时会带来一些不便。当我使用了这个叫习惯的手机app后就深深喜欢上了它，现在特别推荐给大家。 名字app的名字叫“习惯”，英文版叫“Habits”或者“Loop Habits”，图标是一个顺时针旋转的白色箭头。 基本功能首要的功能当然是习惯的记录，在app中设定不同的习惯之后，可以通过长按对应的日期进行打勾，再次长按即为取消。 数据统计点击相应的习惯名称可以查看详细的统计信息，并可以补填忘记打卡的日期。 进阶功能 - 桌面控制台 （仅安卓）这是我最想和大家分享的功能，也是我特别喜欢这个app的原因之一。我一直都想弄一个类似于控制台的东西（比如有很多按钮和显示器的大操作台），用它每天晚上通过按按钮进行打卡。这个app从某种程度上帮我实现了这个愿望。在安卓系统里，我们可以在桌面上添加这个app的插件。插件有不同的种类，我喜欢的是如下图这样的，每天只要在相应的图标上单击即可打卡，非常方便： 扩展功能app的数据可以导出，不过不是特别方便，因为需要对每个习惯一一进行导出。不过制作者提供了app的源代码，所以我以后有空的时候希望对app尝试增加以下功能： 数据简便地导出 数据的导入 登陆功能：数据在不同终端的同步]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>习惯</tag>
        <tag>记录</tag>
        <tag>app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[这些事情帮我打开了新的天地]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E8%BF%99%E4%BA%9B%E4%BA%8B%E6%83%85%E5%B8%AE%E6%88%91%E6%89%93%E5%BC%80%E4%BA%86%E6%96%B0%E7%9A%84%E5%A4%A9%E5%9C%B0%2F</url>
    <content type="text"><![CDATA[以下记录的是一些曾经让我觉得：“不试不知道，一试忘不掉”的事情/软件等。 生活习惯酸奶加燕麦：准备早餐原来如此简单 各种尝试建立个人网站：做网站不难，而且会上瘾的击剑：速度与技巧的集合，锻炼集中注意力射箭：更加了解自己的身体，使用肩部力量 软件/app类文件自动备份系统（如MyCloud和MyPassport等）：备份在手，心里不慌。Github/Gitlab：代码管理如此轻松Markdown：轻量化的文本撰写语言，简书也兼容 未完待续]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>knowledgebase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[让我们觉得自己有高贵灵魂的一些小事]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E8%AE%A9%E6%88%91%E4%BB%AC%E8%A7%89%E5%BE%97%E8%87%AA%E5%B7%B1%E6%9C%89%E9%AB%98%E8%B4%B5%E7%81%B5%E9%AD%82%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[文章里说的都是很小很小的小事，也许小到真的只是举手之劳，可是细细想来，能做到这些小事，便能为自己和别人提供一丝方便。点点滴滴，把我们塑造成了高贵的人。 此外，本文作者在德国和瑞士生活多年，文中的一些“小事”在这两个国家都是司空见惯的小事，然而在国内，需要我们一起的努力，把这些小事一步一步变成习惯。 为他人着想 进出门时，主动为后边的人扶门。 （司机）礼让行人。车让人，不用多说了，看到斑马线了提前减速，请过路的行人先通过。也可以用手礼貌的示意行人先行。不要高速驾车直到逼近斑马线才突然刹车，提前减速避让行人。 （行人）礼让机动车。在德国和瑞士，辅路的车上主路时，一是要避让行人，同时也要避让主路的过往车辆。有时好不容易等到主路车少了，结果刚好遇到行人过马路，这一等又不知道等到什么时候去了。过这种路口时行人有先行权，不过有时，我们也可以放弃这一点点先行权，而让整个system更加高效。在这时，我通常会观察下主路车辆，如果刚好没车，就示意（准备）避让我的辅路车先行通过。 为上电梯来晚的人按着开电梯门按钮，避免在他进入电梯时，电梯门突然关闭。 车进站时，在车门两侧等待上车，留出车门正对的空间给车上的乘客下车。先下后上。 有人跑着来赶车，请帮他们挡一下车门。 很多事，看破不说破，自己觉得微不足道的事情，在别人那里可能是小确幸，请保护他们的幸福感和快乐。 别人到桌子下（或窗下、或其他家具下）取东西，如果头有碰到桌子的风险，请用手隔在桌子和他的头之间，并提醒他起身抬头时小心一点。 学会感恩和珍惜 向办公室的保洁员说声谢谢。 餐厅服务员上菜时，以及撤下空盘子时，说声谢谢。 向公交车司机说声谢谢和再见。 保护环境，我们的责任 避免使用一次性餐具，尤其是一次性塑料餐具 不乱扔废弃的塑料制品、不乱丢垃圾 注意垃圾分类。目前国内的垃圾分类做的还不到位，不过如果你所在的城市已经在试点垃圾分类，请努力支持。在德国和瑞士，需要将玻璃瓶（透明、绿色、深色）、铁器、废纸及纸壳、PET饮用水瓶、其他塑料瓶、厨余垃圾等分类回收。在国内，如果你附近有收废品的，请继续将废纸、废瓶子、废铁等卖（送）给他们。也算是为回收做贡献了。 废弃电子产品、废电池尽量送到专业的回收点。这里边的重金属材料对环境的污染特别强烈。（同时请注意个人隐私，尽量破坏掉存储器部分） 尽量发挥物品的最大价值。举个小例子，废弃的装A4打印纸的盒子我会拿来装废纸，这样再次发挥了一点盒子的价值。购物等赠送的小塑料袋或包装袋，可以留着当垃圾袋。 爱护公物 按电梯、公交车和火车的开门键时，轻轻的按一次即可，不要猛力反复使劲按。 礼貌地开关门，不要使劲摔门，一方面保护公物，另一方面也减少噪音防止吵到别人。]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>knowledgebase</tag>
        <tag>SQN规范化建议</tag>
        <tag>高贵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重装系统-买新电脑后的一些必要软件的安装与设置--养成好的工作习惯]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F-%E4%B9%B0%E6%96%B0%E7%94%B5%E8%84%91%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%85%E8%A6%81%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E8%AE%BE%E7%BD%AE-%E5%85%BB%E6%88%90%E5%A5%BD%E7%9A%84%E5%B7%A5%E4%BD%9C%E4%B9%A0%E6%83%AF%2F</url>
    <content type="text"><![CDATA[（本文章适用于Windows 10系统的用户） 1月15日上班的时候发现实验室的电脑挂了，彻底没有反应了。本来以为是电源的原因，不过测试后发现电源没问题，推测为主板的原因。所以导师让我买了个新电脑，当天就买回来并开始一步步把目前需要的软件安装好了。 好在之前的使用习惯比较好（下边的”原则性建议“里有具体讲）数据都存在HDD硬盘里，SSD的系统盘里基本没有存东西。这样的话把原来的2T的HDD硬盘拆下来插在新电脑的额外硬盘插槽里，以前的数据都完好的等待我使用了。另外我还对重要的工作文件进行了西部数据MyCloud Mirror Gen2的镜像备份，这个以后再细说。下边先讲讲Windows的使用部分建议以及有用的软件。 #原则性建议 现在很多电脑，尤其是台式机，有两块硬盘。一块是256G左右的SSD用于安装系统（通常为C盘），另一块是1T或2T的HDD磁盘用于存储数据。原则上所有的除系统之外的数据都存到HDD磁盘（通常为D盘）。这样在系统崩溃或者新换电脑后，将原来的数据磁盘作为外接磁盘放到其他电脑上即可使用保存的数据，避免了数据的丢失。具体请继续参见“设置建议”。 可以在D盘的根目录中建立如下文件夹以代替原来C盘中的相应文件夹，并将临时使用的数据也存在D盘。习惯上我会在D盘根目录中建立一下文件夹 DesktopWorkspace, TEMP_CouldDelete，Downloads #设置建议 如果是在国外购买的电脑，系统中显示的部分中文为乱码， 参考此处 设置非Unicode 可以将以前电脑的存储硬盘作为外接硬盘安装到新电脑里（很多新电脑都预留了一个额外的硬盘插槽，只要把硬盘插进去即可使用，就像使用移动硬盘一样简单）。 如果必要的话，把这块存储硬盘的盘符改为和之前一样，比如之前是D盘，在新电脑上自动设置为G盘，则可以将新电脑的D盘改为其他盘符，然后将原来电脑的D盘依然命名为D盘 不要在C盘以及相关的路径，比如桌面、我的文档、我的图片等路径存储自己的数据，其他需要设置的例如 聊天软件（skype）、音乐软件（虾米）等的聊天记录、下载等的存储位置,例如放到D:\ChatFiles 浏览器(Chrome, Edge)的下载Download存储位置，例如放到D:\Download Dropbox和Onedrive等云软件的位置，例如放到D盘根目录 文献管理软件Mendeley的文献存储目录，例如放到D:\MendeleyPapers VM VirtualBox的配置文件和虚拟机硬盘，例如放到D:\VirtualBoxVMs 启用“删除确认”功能。方法：回收站图标上右键单击-&gt;属性-&gt;勾选显示删除确认对话框。 多屏幕设置中的工具栏设置。建议:在所有屏幕上显示工具栏、在窗口打开的屏幕上显示工具栏图标、合并工具栏图标并隐藏标签 文件名中尽量不要有空格，可以使用“-”或者“_”代替 文件夹名称中的日期建议使用yyyymmdd的格式，如20190102表示2019年1月2日，这样不容易因为时间久了记不清到底哪几位是月，哪几位是日 对于部分用户:使用记事本生成的文件尽量保存为.md格式而非.txt格式。一方面Markdown文件中可以进行加粗及编号等格式设置，另一方面md文件有更好的预览支持。 以下为一些重装电脑后可能需要尽快安装的有用软件. #辅助工具 Chrome,登陆并同步数据、密码和插件等，设置下载地址D:\Download 罗技鼠标设置软件 Setpoint 虾米音乐 D:\ChatFiles\XiamiMusic - 有道词典（在windows app store下载）并软件内下载离线词典 - 或 使用灵格斯翻译（好久没有更新了） 输入法？百度和谷歌都不更新了貌似，用微软自带即可 Adobe Acrobat XI Adobe Acrobat Reader， 网上下载即可 打印机驱动及控制软件 Microsoft Office并设置每分钟自动保存 OneCommander:分屏对文件夹和文件进行快速操作 #聊天工具 Wechat微信 Skype D:\ChatFiles\SkypeDownload - WhatsApp Windows版 #效率工具 疯狂番茄 Focus To-Do - Xmind GanttProject Dropbox 位置设置到D盘根目录 Onedrive(Windows自带) 位置设置到D盘根目录 #图片编辑 Gimp - INKSCAPE - RawTherapee, 免费的raw格式照片后期处理软件，功能很强大 DarkTable #工作软件（待继续完善） VS code 以及插件Todo highlight 和 VScode-pdf Git for Windows, VScode会自动提示安装git Git desktop MyCloud WD SmartWare 用于备份 - Matlab 2016a Matlab 2014a Mendeley，文献存储目录D:\MendeleyPapers WinSCP Oracle VM VirtualBox: 安装虚拟机，配置文件和虚拟机的硬盘存储在D:\VirtualBoxVMs #研究所网络设置（仅限于我们研究所） 连接Zonula server(以下为Windows版) A. Workgroup设置为CAMPUS并重启电脑 B. 文件浏览器地址栏输入 \\zonula.unibe.ch C. 弹出的对话框输入 CAMPUS\校园用户名 + 密码 连接到Zonula server后，在software文件夹中可以找到部分上述软件。在我本地电脑，我将必要软件安装程序存储于D:\0_WD_other\IMPORTANT_setups]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>习惯</tag>
        <tag>knowledgebase</tag>
        <tag>SQN规范化建议</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习利用第三方库自动寻找最优参数时报错的一点总结]]></title>
    <url>%2FJ%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%A9%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E8%87%AA%E5%8A%A8%E5%AF%BB%E6%89%BE%E6%9C%80%E4%BC%98%E5%8F%82%E6%95%B0%E6%97%B6%E6%8A%A5%E9%94%99%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;目前的实验中我在用深度学习构建神经网络，开始的时候我一般是随机手调几个数大致看下效果，有时候如果需要知道网络效果随参数变化的趋势，就用for循环自动运行许多实验，然后我来收结果并用matlab批量分析。今天同事给我推荐了两个github上的库，利用这两个库可以实现对模型多次的运行并评价系统的运行结果。这个过程中不涉及对系统的优化，只是通过大量的自动运行的实验通过统计学的角度来比较什么样的参数相对较好。 &emsp;&emsp;这两个库分别为Spearmint 和 BayesianOptimization.详细的介绍、安装方法和例子在各自的网站里都有写，我就不赘述了。目前我正在尝试使用Spearmint方法，所以先把安装过程中的一点小提示写在这里。 &emsp;&emsp;首先，这个库是在python 2.7环境的，如果你使用python 3 的话会遇到一些问题，所以建议使用2.7. &emsp;&emsp;其次，新版的scipy中weave模块已经独立出来，所以原来的文件中使用的scipy.weave as weave语句就没法使用了，会报错。有人建议如下修改 1234try: import scipy.weave as weaveexcept ImportError: import weave &emsp;&emsp;可是我的电脑上即使更新scipy后也无法导入scipy.weave或者weave，所以只好使用下边这种方法，也就是完全不使用weave库。因为weave只使用了一次，所以只要在/spearmint/kernels/kernel_utils.py文件中把使用weave模块的部分注释掉即可，把第226行附近的代码调整为如下所示。原来使用weave模块用c语言计算的部分被用python语言的替代了，计算速度会下降，不过好歹可以用了。此外记得删除kernel_utils.py和/spearmint/models/gp_classifier.py文件中weave模块的import。 123456789#try:# scipy.weave.inline(code, [&apos;x1&apos;,&apos;x2&apos;,&apos;gX&apos;,&apos;ls&apos;,&apos;M&apos;,&apos;N&apos;,&apos;D&apos;], \# type_converters=scipy.weave.converters.blitz, \# compiler=&apos;gcc&apos;)#except:# The C code weave above is 10x faster than this:for i in xrange(0,x1.shape[0]): gX[i,:,:] = 2*(x1[i,:] - x2[:,:])*(1/ls)return gX &emsp;&emsp;这样调整好之后，可以用example文件夹中的例子先进性一下试验和学习。然后根据介绍相应的构建适合自己项目的主程序以及json文件。 &emsp;&emsp;关于介绍中说的第三步step 3: Running spearmint中的代码 1python main.py \&lt;/path/to/experiment/directory\&gt; &emsp;&emsp;这里的main.py指的是spearmint的主程序，在spearmint文件夹下，所以运行这个语句之前需要先转到spearmint文件夹，否则会提示找不到相应的文件。 参考：1.https://github.com/HIPS/Spearmint/issues/992.https://github.com/HIPS/Spearmint/pull/107/commits/2f29459ade04e399e55fa9f4334265de60a9b4cd 本篇文章原发表于我的个人博客: qingnansun.com]]></content>
      <categories>
        <category>J机器学习基础</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《自-深深处》奥斯卡-王尔德[英]-金句摘抄]]></title>
    <url>%2FD%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E3%80%8A%E8%87%AA-%E6%B7%B1%E6%B7%B1%E5%A4%84%E3%80%8B%E5%A5%A5%E6%96%AF%E5%8D%A1-%E7%8E%8B%E5%B0%94%E5%BE%B7-%E8%8B%B1-%E9%87%91%E5%8F%A5%E6%91%98%E6%8A%84%2F</url>
    <content type="text"><![CDATA[以下内容整理自《自 深深处》，没有按原文顺序，而是按照内容整理并归纳到相应主题中。 “你”的致命缺陷若我做到了，就请你一遍一遍读这封信，直到它将你的虚荣心全部吞噬。 我发现你更适合于一种文化层次较低的友谊，我这样说只是出于友人的坦诚，不带半点责备意味。所有伙伴关系的维系纽带，不管是婚姻还是友谊，最终都归于对话，而对话必须要有一个共同的基础。 它就是你性格中恨远大于爱。你对父亲的恨是如此之深，它完全超过甚至能推翻你对我的爱，这种恨使你对我的爱蒙受阴影。 在这座精雕细琢的美丽“房子”里，爱和恨是不能同生共存的。爱是靠想象力字样的，想象力能让我们比我们所知的更聪慧，比我们所感的更美好，比我们本身更高贵。通过想象力，我们能完整地看见生活本身，也只有想象力能让我们像了解理想中的那样去了解现实状态下任何人建立的关系。唯有在本就美好又受人们美好的想象力咀嚼过的事物中才能滋养爱，但是恨却可受任何事物的滋养。 那些年，你喝的香槟没有一杯不催生你的怨，你享用的大餐没有一顿不滋养你的恨。 你所恨的是自己的父亲，并且这种恨又完全是相互的，这样的事实并没让你的恨显出一丝高贵或精致。如果它真能显示什么，那只不过是你的遗传疾病。。。 如果说仇恨蒙蔽了你的双眼，那么虚荣心就用钢筋铁线缝合了你的眼睑。 爱情和文学中都自有策略，但你对两者皆不通不懂。 “我”的苦难与“小确幸”我记忆中最愉快的一次就餐是和罗比在索霍区的一家小咖啡馆进行的，我们花费的“先令”数额与你就餐所花费的“英镑”数额相等。三法郎五十分的套菜就囊括了谈论的思想，名称以及优雅的款待、氛围。和你一起花天酒地后却一无所剩，只留下吃喝无度的记忆。 在我被囚禁的大监狱里，我只是一长排走廊中一间小囚室的一个数字或字母，千百个了无声息的数字中的一个，千百条暗淡无光的生命中的一员。 对我们来说，时间是旋转的而不是向前流动的，它似乎是环绕着痛苦在运动。 （罗比庄重地举帽向戴着手铐低头从他身边走过的囚犯奥斯卡致敬）记忆中这微小可爱的无言善举向我开启了怜悯之泉:沙漠像玫瑰一样开出花朵，我终于被带离了凄苦的流放之地，与世界那颗受伤破碎的伟大心脏和谐共振。 你可知道：你若受苦我也一样受苦；你若哭泣我也泪水纵横；你若身陷奴役之屋受人唾弃，我会强忍着悲伤再建筑一屋当作宝库，将别人不给你的东西上百倍地置放屋内，等你到来，为你疗伤；若苦涩的必尽之责或谨慎之心阻挡我来到你的身边–这对我单方面来说必定更加苦涩–并且剥夺你和我在一起的快乐（虽然我们还能以一种受辱潦倒的方式透过铁窗横档相见），我至少可以终年不断地给你写信，只希望我的片言只语能够让你读到，只希望被击碎的爱的残音能够让你听见。如果你拒收我的信，我也会一如从前地写，以便让你知道无论沧海桑田，总有我的信在等你阅读。 爱、幸福、悲伤、原谅但我对自己说：“不管付出什么代价，我必须守护我心中的爱。如果我因受困囹圄就抛别爱，我该如何安放自己的灵魂？” 肉体的罪孽不足为道，如果它们必须治疗，医生们足以对付它们；只有灵魂的罪孽才是可耻的。 或者，我有过一时片刻认为你是值得我爱的？你当然不配，我知道。但是爱不是市场上的交易，不是小贩们的磅秤可称量的。如同精神的快乐，爱的快乐是感受到本身的生命流动。爱的目的就是爱，不多也不少。 读到但丁如何将那些恣情沉溺于悲伤中的人放置在地狱中时，就去学院图书馆翻到但丁《神曲》中描绘那番景象的一页，那些躺在可怕的泥潭下“在甜美的氛围中仍愠怒无常，怒气冲冲”的人用一声声叹息诉说着：那时我们心中愁云密布，而阳光中甜美的空气喜气洋洋。 我必须学会如何让自己变得快乐幸福。 悲伤以及它教给人的一切是我的新世界。 从未在悲伤中咀嚼过面包，从未在午夜时分，哭泣着等待黎明的人，是不了解你的—-来自天国的力量。[注：从未在深夜痛哭的人，不足以谈人生。] 欢笑背后可能隐藏着粗糙、坚硬和冷漠的性情，但悲伤背后总是悲伤。痛苦不像享乐，它不带面具。 现在我认为，这苦海无涯的世界正是为了说明某种爱的存在，这是唯一可以能的解释。 当他（耶稣）说“原谅你的敌人吧”的时候，他不是为了敌人而是为了他自己，因为爱比恨更美丽。 为了我自己，我也必须原谅你。一个人不可能总是将一条蝰蛇供养在心口，也不可能每晚起身在心灵的花园里播种荆棘。 现在我真正开始觉得自己对那些嘲笑之辈的惋惜多于对自己出境的追悔。。。这些人本应知道如何更好地去解读悲伤，我曾说在每一个悲伤后面总掩盖这另一个悲伤，更明智的说法是每一个悲伤后面总掩盖着一颗灵魂。因此，以嘲笑一颗痛苦的灵魂为乐是件残忍的事情，他们这样做是不美的。 生命的感悟真正的愚蠢之辈是对自己一无所知的人，正如那些受众神嘲笑或损毁的人。 你一离开我就一切安好。 衰老的双手摘取月桂枝叶会令其枯萎，唯有青春方能为艺术家加冕。 令人悲哀的是，又有多少人在临死之前曾“拥有过自己的灵魂”？爱默生曾说：”世界上没有什么能比一个人发自灵魂的行动更为稀有。”这是真实的，大多数人都是自己的他者。他们的想法是别人的意见，他们的生活只是一场模仿秀，他们的激情是对他们的引用。[注：Be yourself. Everyone else is already taken. 做你自己，因为别人都有人做了。] 当然，我知道在马路边祈求施舍不会是我的命运，若我夜晚要躺在清凉的草地上，那也是在给月亮写十四行诗。 从声名卓著到声名狼藉仅一步之遥，当然如果真还有“一步”这么长的话。 这样做（注：节俭）不是出于饥饿–我现在食物相当充足–这样做仅仅是因为我丝毫都不能浪费给我的一切。对待别人给予的爱，也应如是。 从某种意义上看，正如希腊神谕所说，“知道你自己”当然是必需的。但是智慧的终极成就是认识到人的心灵是不可知的。世界最终的奥秘恰是人的自我。 我的服刑期延长了一年，但人性一直在监狱中与我们同在。现在我即将服刑期满离开此地，将会永远记得这儿几乎每一个人曾给予我的伟大善意。在刑满释放日，我将会向很多人表达我的谢意，并请求他们同样记住我。 如果出狱后哪位朋友举行宴会但不邀请我参加，我是不会心存芥蒂的。独处时我将会无比快乐。拥有自由、书籍、鲜花和月亮的人怎会不快乐？。。。但是，如果出狱后哪位朋友忧伤满腹却拒绝让我为其分忧解难，我将倍感痛苦。 在《道连-格雷》一书的某章中我曾说：“一个人在选择他的敌人时，无论怎么小心都不为过。”我实在想不到自己会被一个贱民造就成了一个贱民。]]></content>
      <categories>
        <category>D读书笔记</category>
      </categories>
      <tags>
        <tag>金句</tag>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[金句摘抄]]></title>
    <url>%2FD%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E9%87%91%E5%8F%A5%E6%91%98%E6%8A%84%2F</url>
    <content type="text"><![CDATA[From this day to the ending of the world,But we in it shall be remembered, —We few, we happy few, we band of brothers.For he to-day that sheds his blood with me,Shall be my brother;from Henry V, spoken by King Henry 守夜人誓言：「长夜将至，我从今开始守望，至死方休。我将不娶妻、不封地、不生子。我将不戴宝冠，不争荣宠。我将尽忠职守，生死於斯。我是黑暗中的利剑，长城中的守卫。我是抵御寒冷的烈燄，破晓时分的光线，唤醒死者的号角，守护王国的铁卫。我将生命与荣耀献给守夜人，今夜如此，夜夜皆然。权利的游戏 “Night gathers, and now my watch begins. It shall not end until my death. I shall take no wife, hold no lands, father no children. I shall wear no crowns and win no glory. I shall live and die at my post. I am the sword in the darkness. I am the watcher on the walls. I am the fire that burns against the cold, the light that brings the dawn, the horn that wakes the sleepers, the shield that guards the realms of men. I pledge my life and honor to the Night’s Watch, for this night and all the nights to come.”权利的游戏]]></content>
      <categories>
        <category>D读书笔记</category>
      </categories>
      <tags>
        <tag>金句</tag>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你是童话城堡中最美的新娘]]></title>
    <url>%2FS%E9%9A%8F%E7%AC%94-%E4%BD%A0%E6%98%AF%E7%AB%A5%E8%AF%9D%E5%9F%8E%E5%A0%A1%E4%B8%AD%E6%9C%80%E7%BE%8E%E7%9A%84%E6%96%B0%E5%A8%98%2F</url>
    <content type="text"><![CDATA[你是童话城堡中最美的新娘 2017年8月19日，豆豆小公主和骑士先生在荷兰De Haar城堡中举办婚礼。朋友、同事、鲜花、马车，童话城堡中最美的公主出嫁了。 “我就要在De Haar办婚礼”早在几年前当骑士先生还在德国时，就萌生了举办城堡婚礼的念头，毕竟未来的新娘是小公主，城堡再合适不过了。 可是没等这个计划实现，骑士先生就搬到了瑞士，于是他又开始在瑞士寻觅婚礼场地:城堡、教堂、游艇、博物馆……各种可能而且美好的地方都被纳入考虑范围，可是始终没有哪个场地能给他”就是这了！”的感觉。 今年初的时候他突发奇想，为什么不看看荷兰的城堡？看到排名第一的De Haar城堡时，心里咯噔一下:这就是我要找的地方！赶紧查了查资料，发现之前有一位嫁给荷兰人的中国女孩也在这办的婚礼，她还写了文章分享那份快乐。再看看城堡的官网，恰巧几周以后是城堡专门为筹备婚礼的新人准备的开放日，赶紧让豆豆小公主注册报名去参加开放日及面谈。 不仅是De Haar城堡有开放日，荷兰许多其他的城堡也在那天举办开放日。骑士先生还选了几个备选方案，希望小公主那天一并看下。可是小公主执意只去De Haar, “我就喜欢De Haar,我就要在这办婚礼，其他不考虑!” 好在天随人愿，8月份还有唯一一个周六可以预约，我们果断确定了婚期。 .准备婚礼并非那么轻松，尤其是爸妈都不在这边，而且不找婚礼策划。几乎所有的事情都得亲力亲为，城堡、餐馆、摄影师、摄像师、马车租赁、婚礼蛋糕、购置各种物品等等，都靠小公主一一联系和]]></content>
      <categories>
        <category>S随笔</category>
      </categories>
      <tags>
        <tag>童话</tag>
        <tag>新娘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu上安装python3-6以及设置为系统默认]]></title>
    <url>%2FLinux-Python-Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85python3-6%E4%BB%A5%E5%8F%8A%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%2F</url>
    <content type="text"><![CDATA[这篇文章记录了如何在Ubuntu上安装python3.6以及将其设置为系统默认。 查看Ubuntu版本由于python3.6在不同的Ubuntu版本中的安装是不一样的，这里我们先来看一下的Ubuntu的版本，在terminal中输入lsb_release -a即可查看，例如我的Ubuntu版本为16.04.4. 不同Ubuntu版本上的python3.6的安装文末的参考资料[1]中的高赞回答列举了python3.6在不同版本的Ubuntu上的安装，这里摘抄如下: Ubuntu 14.04 and 16.04123sudo add-apt-repository ppa:deadsnakes/ppasudo apt-get updatesudo apt-get install python3.6 或者 123sudo add-apt-repository ppa:jonathonf/python-3.6sudo apt-get updatesudo apt-get install python3.6 安装完成后使用python3.6命令运行 Ubuntu 16.10 and 17.0412sudo apt-get updatesudo apt-get install python3.6 安装完成后使用python3.6命令运行 Ubuntu 17.10在Ubuntu17.10中已经默认使用python3.6，所以可以直接用python3运行 设置python3.6为系统默认安装好python3.6之后，我的系统中有python2.7，python3.5和python3.6三个版本的python。为了避免每次使用python3.6命令，希望把python3.6设置为系统默认。在设置之前，我们首先来看一个系统中python命令，python3命令以及不同版本python的路径，之后的操作中我们也需要其中的部分路径： 设置python命令默认使用python3.612sudo rm python的路径sudo ln -s python3.6路径 python的路径 设置python3命令默认使用python3.612sudo rm python3的路径sudo ln -s python3.6路径 python3的路径]]></content>
      <categories>
        <category>Linux-Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows与虚拟机VirtualBox中的Ubuntu共享文件和文件夹]]></title>
    <url>%2FIT-Windows%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BAVirtualBox%E4%B8%AD%E7%9A%84Ubuntu%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E5%A4%B9%2F</url>
    <content type="text"><![CDATA[最近因为实验需要，重新启用了好久不用的Virtual Machine，做好基本的设置之后觉得有必要实现windows系统与VirtualBox中的Ubuntu系统的文件共享。尝试了网上说的很多方法都一直报错，最后终于在合并了几个方法的不同步骤之后实现了，现在总结和分享一下。 1 Windows端 2 Linux端 2.1 设置VirtualBox中虚拟系统的共享信息 2.2 在Terminal中下载所需镜像并安装 2.3 挂载共享文件夹 2.4 其他代码 2.5 其他信息Windows端 Windows端需要建立一个用来进行文件分享的文件夹，比如我在D盘建了一个ShareWithVM文件夹。在这个文件夹的图标上用鼠标右键单击，然后选择属性–&gt;分享，然后选择“高级分享（Advanced Sharing）”并勾选“分享这个文件夹”，然后单击“确定”即可。 Linux端设置的重点在linux端，也就是虚拟机上的Ubuntu上，网上有很多教程，可是我使用后并不成功，以下是我的设置过程。 设置VirtualBox中虚拟系统的共享信息在VirtualBox Manager界面中选择需要设置的Ubuntu虚拟系统，然后按下图的顺序添加刚才在Windows端建立的共享文件夹的信息。这一步可能需要先关闭虚拟机再设置，我不太记得我设置的时候虚拟机是关闭还是运行状态了。 在Terminal中下载所需镜像并安装这一步可以用参考链接[1]中的方式在windows系统下载然后再虚拟机选择相应镜像，不过我是通过以下的代码实现的。 首先运行Ubuntu并打开一个terminal，然后输入以下代码： 1sudo apt-get install virtualbox-guest-additions-iso 接下来在图形界面里的以下位置找到这个映像，并用鼠标右键单击，选择Open With Disk Image Mounter，它就会自动安装了，直到安装成功后按enter键退出。 1/usr/share/virtualbox/VBoxGuestAdditions.iso 挂载共享文件夹在Ubuntu的Terminal里输入如下命令： 1sudo mkdir /mnt/shared 1sudo mount -t shareFolder是windows中要共享的文件夹的名字，由于我第一步在windows创建的分享文件夹角ShareWithVM，所以我在我这输入的代码实际为： 1sudo mount -t vboxsf ShareWithVM /mnt/shared 如果一切顺利的话，现在就可以互传文件了。补充一下，你的共享文件夹在windows端的位置在本文开头已经说了，在ubuntu的位置是在/mnt文件夹下的shared里，如果你想查看这个共享文件夹里的内容，可以用如下代码定位到共享文件夹： 1cd /mnt/shared 其他代码以下部分均转自参考资料[1]，我并没有实际操作，因为自动挂载已经在前边说的Linux端的第一步勾选了，我觉得不必再设置了。 要想自动挂载的话，可以在/etc/fstab中添加一项12&gt; share /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0&gt; 5、卸载的话使用下面的命令：12&gt; sudo umount -f /mnt/shared&gt; 注意：共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的&gt;名字也是shared的话，在挂载的时候就会出现如下的错误信息：12&gt;/sbin/mount.vboxsf: mounting failed with the error: Protocol error&gt; 其他信息除了上边写的我最终成功使用的方法，网上还比较流行的是用代码安装open-vm-tools并配合使用一个从gitlab下载的补丁进行安装。看网上的评论应该是很多人都用这个方法成功了，可是我就是不行，始终提示mounting failed with the error: No such device.如果大家感兴趣的话，可以尝试这种方法。 此外需要说明的是我在成功安装之前，实验了很多方法，虽然都没有成功，但是其中用到的一些代码可能为最后的成功安装做了铺垫，所以如果你按照我前边说的步骤不能成功安装的话，可以尝试一下链接[3]中的各种代码，以及如下两句。 12sudo apt-get updatesudo apt-get install virtualbox-guest-dkms 今天为了弄这个文件共享花了很多时间，因为找不到对应的方法，而网上说的解决方案在我这又不太管事。希望这篇文章可以帮到和我遇到相似问题的朋友们。 参考链接 [1] http://www.cnblogs.com/linjiqin/p/3615477.html[2] https://askubuntu.com/questions/792832/how-to-install-virtualbox-guest-additions-for-ubuntu-16-04[3] https://blog.csdn.net/fukaibo121/article/details/73129584]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>虚拟机</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用python构建ARIMA模型进行预测分析的小说明-forecast函数]]></title>
    <url>%2FJ%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80-%E4%BD%BF%E7%94%A8python%E6%9E%84%E5%BB%BAARIMA%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E9%A2%84%E6%B5%8B%E5%88%86%E6%9E%90%E7%9A%84%E5%B0%8F%E8%AF%B4%E6%98%8E-forecast%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;Autoregressive Integrated Moving Average model(ARIMA)，即差分整合移动平均自回归模型，或称为整合移动平均自回归模型，是一种时间序列预测分析方法。今天我在实践过程中遇到一个小问题，后来看了官方文档才弄清楚，这里和大家分享一下。 &emsp;&emsp;首先分享三篇我觉得比较好并且容易上手的教程，其中包含源代码可以直接使用。第一篇是一个最简单的入门，是单步预测；第二篇可以进行多步预测；第三篇对于算法使用前的数据处理和分析进行了详细的介绍；第四篇也有相详尽的步骤和代码，并对数据进行了详细的分析，第五篇详细的介绍了从线性回归到AR、ARMA、ARIMA及GARCH等方法。 How to Create an ARIMA Model for Time Series Forecasting with PythonHow to Make Out-of-Sample Forecasts with ARIMA in PythonForecast a time series with ARIMA in PythonA Guide to Time Series Forecasting with ARIMA in Python 3Time Series Analysis (TSA) in Python – Linear Models to GARCH &emsp;&emsp;以第二个链接中的代码为例。这个链接中的《5. Multi-Step Out-of-Sample Forecast》将的是对样本量之外的多步预测，使用的Forecast function。具体的说，目前的数据为截止到12月24日的历年最低气温，现在要预测从12月25日到12月31日的最低气温。这里使用的代码为： 1forecast = model_fit.forecast(steps=7)[0] &emsp;&emsp;其中steps=7很好理解，就是预测未来七天的意思。可是后边方括号里的0让我很费解，而且把forecast的数据打印出来也很奇怪，是两行7个元素的数组，加一个二维的矩阵。后来看了官方文档之后，发现取0行是因为只有这一行才是预测的结果，第二行是预测的标准差（standard error），后边的二维矩阵是预测的置信区间。具体的官方解释如下： 1ARIMAResults.forecast(steps=1, exog=None, alpha=0.05) Out-of-sample forecasts | Parameters: | steps : intThe number of out of sample forecasts from the end of the sample. exog : arrayIf the model is an ARIMAX, you must provide out of sample values for the exogenous variables. This should not include the constant. alpha : floatThe confidence intervals for the forecasts are (1 – alpha) % | Returns: | forecast : arrayArray of out of sample forecasts stderr : arrayArray of the standard error of the forecasts. conf_int : array2d array of the confidence interval for the forecast Notes：Prediction is done in the levels of the original endogenous variable. If you would like prediction of differences in levels use predict 引用资料：statsmodels.tsa.arima_model.ARIMAResults.forecast 本篇文章原发表于我的个人博客: qingnansun.com]]></content>
      <categories>
        <category>J机器学习基础</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设置使用tensorflow作为backend并在GPU上运行]]></title>
    <url>%2FJ%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80-%E8%AE%BE%E7%BD%AE%E4%BD%BF%E7%94%A8tensorflow%E4%BD%9C%E4%B8%BAbackend%E5%B9%B6%E5%9C%A8GPU%E4%B8%8A%E8%BF%90%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;由于Theano从十月起停止更新（LINK），我开始着手把我使用Keras时的backend从Theano转到Tensorflow。以下是今天在同事LY的指导下进行backend转换的一点总结（同时对她表示感谢）。 安装环境：Linux服务器上的虚拟环境中（详见：在linux系统上设置虚拟环境Virtual Environment） &emsp;&emsp;首先我根据Keras官网的介绍对keras.json文件进行设置（LINK）。在命令框中输入： 1vi .keras/keras.json &emsp;&emsp;然后按着如下代码编辑，主要是把backend改为tensorflow。（其实Keras默认的backend就是tensorflow，只是因为我之前改成了theano，所以现在要改回来。） 1&#123; &quot;image_data_format&quot;: &quot;channels_last&quot;, &emsp;&emsp;另外如果你还没有安装GPU版本的tensorflow，则需要首先进行安装。由于我们实验室的server上不兼容1.3版本的tensorflow，我这里对安装的版本进行了控制 1pip install tensorflow-gpu==1.2 &emsp;&emsp;成功安装之后，就可以在你的.py文件的代码里加入如下语句进行tensorflow的backend的调用和设置了，设置好之后像平常一样运行文件即可。 12345678import tensorflow as tfimport keras.backend.tensorflow_backend as KTFos.environ[&quot;CUDA_VISIBLE_DEVICES&quot;] = &quot;3&quot; #设置需要使用的GPU的编号config = tf.ConfigProto()config.gpu_options.per_process_gpu_memory_fraction = 0.4 #设置使用GPU容量占GPU总容量的比例sess = tf.Session(config=config)KTF.set_session(sess) &emsp;&emsp;为了观察程序是否确实在使用GPU，可以使用在《Linux上的一点小技巧》中提到的命令gpustat或者watch -n1 --color gpustat进行查看程序是否真的运行在GPU上。 —————–后记——————— Tensorflow无法完全实现实验的重复性&emsp;&emsp;今天早些时候介绍了怎么在给keras设置使用tensorflow作为后端。晚上的时候发现使用tensorflow有个问题是无法确保实验的可重复性，换句话说，同样的代码，每次运行出来的结果是不一样的，即使已经设置了随机数的seed。而使用theano的后端是可以确保实验的可重复性的，至少在我之前的实验里，可以得到一模一样的结果。 &emsp;&emsp;对于这个问题，我在网上查阅了一下，发现也有人在讨论，比如在[1]中对各种可能的原因进行了探讨，并根绝theano和tensorflow后端各自给了设置seed的代码。对于tensorflow，要进行两次seed的设置，他们的值可以不同。代码如下，需要放在你的code的最顶端，不过此方法我试了没有起到效果。 1234from numpy.random import seedseed(1)from tensorflow import set_random_seedset_random_seed(2) &emsp;&emsp;此外也有其他的帖子和文章对tensorflow作为backend时不能实现实验的重复性进行了讨论，比如在[2]中的帖子以及在[3]中keras的官方文档中都有提到建议的解决方案，不过我试了依然没有效果。[4]是对tensorflow的set_random_seed函数的具体介绍。 &emsp;&emsp;最后，由于tensorflow没法确保实验的可重复性，而我也没有找到适合我的解决方案，于是只好又切换为theano作为backend。不过今天的尝试也不是完全没有意义的，因为借着今天在tf上积累的一点经验，我想到了给theano后端也设定运行时占用GPU的容量比例，实践后发现代码运行速度大大提高。theano和Tensorflow有些不同，它默认只占用很少的GPU而tensorflow默认占用所有可用的GPU。比如我的代码在theano作为backend的时候，默认只占200M左右，我给人为把GPU的占比提高到0.4（约为5000M）之后，运行速度大大提高。具体的方法可以参考这篇文章 LINK [1] 用深度学习每次得到的结果都不一样，怎么办？[2] No reproducible using tensorflow backend #2280[3] How can I obtain reproducible results using Keras during development?[4] Tensorflow函数——tf.set_random_seed(seed) 本篇文章原发表于我的个人博客: qingnansun.com]]></content>
      <categories>
        <category>J机器学习基础</category>
      </categories>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows10下安装Python,Tensorflow和Keras]]></title>
    <url>%2FJ%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80-Windows10%E4%B8%8B%E5%AE%89%E8%A3%85Python-Tensorflow%E5%92%8CKeras%2F</url>
    <content type="text"><![CDATA[2018年4月更新：这篇文章原写于2017年10月。据称目前（2018年4月）Tensorflow在windows上已经支持3.6版本，我还没有自己尝试，相关讨论请参考https://stackoverflow.com/questions/40884668/installing-tensorflow-on-windows-python-3-6-x. &emsp;&emsp;今后做实验要开始接触深度学习了，那当然免不了要安装Python和Tensorflow，另外因为需要LSTM方法，我也需要安装Keras。这篇文章就是关于最近安装这些东西的一个小结。 如果你懒得看后文，我其实就一句话，从头开始就用Anaconda吧！！！ （直接跳转到“最简安装过程”部分） 目录1 用Windows遇到的坑2 我的坎坷经历3 最简安装过程4 附加知识 ##用Windows遇到的坑 首先总结一下用windows过程中的坑： Tensorflow目前在windows上只支持Python3.5版本（高了低了都不行） Scipy在windows上用命令行安装出错。因为安装Keras时会安装Scipy，所以无法成功安装Keras 我的坎坷经历&emsp;&emsp;不卖关子了，简而言之，在windows上最好是使用Scientific Python distributions来安装和管理各种库，这是我后来才发现的。由于始终没法成功安装Scipy，我找到了Scipy的这个官网安装介绍，windows系统的同学可以直接拖到最后看下。而Scientific Python distributions的介绍在页面的开头，我直接使用的第一个，也就是Anaconda. &emsp;&emsp;使用Anaconda要注意，因为它的首页上是下载集成了3.6版本的Python的，而tensorflow在windows上只支持3.5版本，所以这个要想办法解决。根据Anaconda的介绍（How do I get the latest Anaconda with Python 3.5?）可以用以下三种方法： A) We recommend downloading the latest version of Anaconda and making a Python 3.5 environment. B) A second option is to download the latest version of Anaconda and then run this command to install Python 3.5 in the root environment: conda install python=3.5 C) A third option is to download the most recent Anaconda Installer that had Python 3.5 by default. This is Anaconda 4.2.0. You can download it from our archive. Scroll down the page until you find version 4.2.0 for your platform. &emsp;&emsp;我用的第二种方法，也就是在开始界面先找到Anaconda Prompt，然后在里边输入命令 conda install python=3.5 &emsp;&emsp;注意在这个过程中不要开着Anaconda的用户界面，否则会报错说Anaconda正在被使用，关闭Anaconda界面之后使用上述命令就好用。安完之后再Anaconda Prompt的界面输入python后发现版本变成3.5.3了。 &emsp;&emsp;tensorflow的安装可以参见莫烦写的教程和视频(LINK)。重点注意选择好是CPU版本还是GPU版本，另外再就是Python3和Python2用的命令的微小差别。我在进行完之前的Python版本降到3.5.3之后，在Anaconda Prompt里使用命令 pip3 install tensorflow 成功安装了tensorflow（太让人激动了！！！） &emsp;&emsp;遇到的问题是为了检测tensorflow是否安装成功，我实验了import tensorflow，可是在Python 3.5.3自己的shell里是可以用，可是在Anaconda Prompt里的python下不能用，不知道为什么。可能因为我在使用上边说的第二种方法转换Python之前，自己手动安装了一次Python3.5.3的缘故，悲催，做了无用功还影响了之后的功能。用了最笨的办法，卸载了python3.5.3，结果Anaconda Prompt打不开了，最后干脆把所有Python和Anaconda都卸载了。 最简安装过程&emsp;&emsp;有了前边的经验铺路，现在大致知道怎么做比较方便了。这段开始我基本就是从头做起了。首先按照前边说的第三种方法，到Anaconda官网的Achiv里下载了Anaconda3-4.2.0版本。安装完之后发现pip3命令没法使用，不过检查了Anaconda里pip包已经安装了的，所以试了下用pip命令，可以。于是使用如下命令进行安装： pip install tensorflow pip install keras &emsp;&emsp;两个都成功安装了，接下来用一下两个命令测验一下是否真的安装成功，当然首先要在命令行用python命令进入python控制界面，然后 import tensorflow import keras &emsp;&emsp;两个都没有报错，keras默认使用TensorFlow作为backend。总算大功告成，可以去吃午饭了，哈哈。 附加知识WINDOWS 下 PYTHON 双版本共存解决方案当电脑里有多个python版本时，通常的做法是要修改环境变量，不过这篇文章中的方法只需要在不想用的版本的根文件夹中加入一个bat文件即可，巧妙的解决了问题，推荐大家看看。如果大家想知道怎么通过修改环境变量来更改默认的python版本，可以看这里 安装Keras可以部分参考这篇文章：windows 10 64bit下安装Tensorflow+Keras+VS2015+CUDA8.0 GPU加速 本篇文章原发表于我的个人博客: qingnansun.com]]></content>
      <categories>
        <category>J机器学习基础</category>
      </categories>
      <tags>
        <tag>windows10</tag>
        <tag>python</tag>
        <tag>tensorflow</tag>
        <tag>keras</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写给女孩的安全建议]]></title>
    <url>%2FX%E4%BF%A1%E6%81%AF%E6%B1%87%E6%80%BB-%E5%86%99%E7%BB%99%E5%A5%B3%E5%AD%A9%E7%9A%84%E5%AE%89%E5%85%A8%E5%BB%BA%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;写在前边的话：很多年来就在构思这样一篇文章，当时主要是想给我女朋友（现在是我老婆）看。虽然都说男女平等，不过不可否认女性在很多侵害中都是“更好”的目标，也更容易被不法分子盯上，所以专门写了这篇给女孩的安全建议，希望女性朋友们能够读一读，保护好自己；男性朋友们也请读一读，提醒和保护好你的（尤其是有些马大哈的）女性朋友。 &emsp;&emsp;以下信息有些是我自己想到的，有些是直接从网上不同文章复制的。相应的参考文章我也都附在文章最后了，如果有任何涉及版权的问题请随时和我联系。之后我也会不断完善这篇文章，最新的文章请查看我的个人主页qingnansun.com。 真实的案例 2013年1月 洛杉矶 蓝可儿在酒店溺亡 2013年7月24日 黑龙江桦南孕妇猎艳杀人案 女孩最后微信内容曝光：送一个孕妇阿姨 到她家了 2014年7月17日 巴黎 中国女孩刘瑾妮在酒店差点被强行拉走 2016年4月3日 北京 如家和颐袭击事件 2016年4月11日 德国李洋洁遇害案 2016年10月3日 巴黎 卡戴珊在酒店被抢劫 2016年11月3日 东京都 江歌被陈世峰在寓所门前用刀刺死 2017年6月9日 美国 章莹颖被绑架，至今下落不明 交友 朋友的定义可能每个人心里都不一样，但是为了安全起见，我建议你保守一些，并不是见过一面的人就叫朋友。 不要以为什么人都很可怜、都可信，时刻保持警惕。 对于刚认识的朋友不要过多的透露自己和家庭的信息。 出行 保持“小特工心态”对事情多一些观察，多一份警惕。 出行前了解当地的各种应急电话，如报警电话、急救电话等 在路上不要低头玩手机，一是可以避免发生交通事故等意外，二是假如有人盯上你并跟踪你，那么如果你还在玩手机的话就不能尽早发现异常。 郊游或者旅行尽量结伴而行，如果必须一个人出行，那及时和家人及朋友更新自己的行踪和情况 避免走夜路，如果参加聚会需要晚归，要提前查好回家的车次，避免错过末班车。 打车时，尤其是晚上打车时，选择正规公司的出租车。并记下车牌号发给好友，及时汇报行踪，必要时要旁敲侧击的让司机知道，你的朋友有你目前的行踪和车牌号等信息。 不要在社交网络过度透露自己的位置信息（包括定位、文字和图片），以免别有用心的人根据这些信息找到你。 不要上陌生人的车。如果赶时间的话就提早计划、提早出门，避免为了赶时间在路上随便拦一辆车就请求帮忙搭个顺风车。虽然Hitchhiking在有的国家挺流行的，但为了你的安全，我绝对不建议这么做。 乘坐汽车，公交和大巴，如果有安全带就一定要系上，不管你是前排还是后排。也不要觉得在市区里就不需要安全带。 不要在公共场合的聊天中过多谈论自己和朋友的个人信息，比如姓名、年龄、电话号码、住址、职业、生日等等，以免被人偷听和记录，并利用这些信息进行不法活动，包括但不限于诈骗。 前边说了不要以为所有人都真的可怜都真的可信。我支持助人为乐，但是希望大家以保护好自己的安全为前提。并不是所有看起来可怜的人都值得你帮助，之前看过有案例说有老人寻求帮助，希望路过的女孩给买点吃的，但是指定要去某一家特定的小饭馆，如你所料，里边藏着他们的同伙。文章开头的桦南孕妇猎艳杀人案也是利用了受害人的同情心。 开车 如果你喜欢买东西、吃饭，下班以后回你车里坐那算账、记事，等等，请你改掉这个习惯。这是罪犯最完美的时刻，劫匪会跳进副驾驶的位子或者后座，拿枪对着你的脑袋让你开车去他方便犯罪的地方，所以一个人外出时，上车以后就锁上车门离开。 记住上车前观察你的车子周围，副驾驶座以及后座。 如果你的车子是停在一个大的面包车边上，而且面包车是停在驾驶座这边的，那么请你从副驾驶这一边上车。 小心停在你车两边的车。如果有男性坐在靠你车的这一面。请你务必小心。 买完东西以后，数清楚你的钱。（有这样的案子：女人在加油站加油以后付过钱回到车上，这时有个男人走过来敲打她的玻璃窗，手里一张5元钱，说她掉的。这个女人就感谢他，开窗/开门，然后……） 离开汽车时不要将贵重物品放在车内显眼的地方，如果确实不方便携带，则想办法将它放在从车外不容易发现的地方。 使用行车记录仪。 住宿/回家 不要在酒店大堂大声呼叫彼此的姓名并询问房间号，因为在有些管理并不严格的酒店，到酒店前台报上对应的姓名和房间号就可以拿到房间钥匙。 晚上在酒店过夜时可以用旅行箱或其他重物挡在门前，或者购买便携门挡。门挡有强力挡门的（比如魔宙这个），也有可以触发警报的（比如这个），价格有贵的有便宜的，可以在网上选购。这里给一个某宝的搜索链接（LINK） 如果有人敲门，要通过猫眼观察，或者先仔细询问，不要轻易开门。有朋友曾经跟团出游，晚上听到敲门以为是团友来玩，直接就拉开房门，结果门口是个醉汉走错房间了。如果敲门的不是醉汉而是有准备的坏人，后果不堪设想。 在不能确保安全的情况下，绝对不要开门，可以打电话给酒店前台，请他们来处理。 在一些治安不好的地区（比如巴黎的某些区），酒店员工有可能参与犯罪行为，所以如果是在深夜中，接到前台的电话让你出门，也不要贸然开门离开房间。 通过正规网站比如booking预订住宿。如果你想尝试Airbnb和Couchsurfing，我建议你好好查看对方的信息和别人对他/她的评价，选择评分高和可靠的Couchsurfing host。我也曾经是Couchsurfer，并且遇到的都是很好的人，不过这不代表couchsurfing没有风险，我们要做的是把风险降到最低，把自己置于安全的环境中。 回家或者回到酒店时，如果单元门前或者房门前如果有陌生人，不要急着开门进屋，尤其是家里没有其他人在家的情况下。可以假装路过并到安全的地方等待，之后再回家。 接着上一条，回家或者回到酒店时，提前准备好钥匙或者门卡，快速的开门-进屋-关门。不要在门口长时间地找钥匙，也不要进门后不关门就忙着换鞋或者做其他的事情，以免给坏人留下冲门而入的机会。 记住要坐电梯，特别是晚上。楼梯间在早上和晚上都不是什么有趣的地方。这里给一个和犯罪没什么关系的小提醒:如果坐电梯的时候电梯突然下坠，立刻把你这层下面的所有楼层全部按一遍，前提按键没有失灵。一般情况下如果突然下坠是电路问题，那么如果到哪层电路工作正常了，电梯会停下。如果电梯持续下坠，请背靠电梯墙壁站好(作为脊椎支撑)，手扶紧扶手，半弯你的膝盖(电梯突然着地可以稍微缓冲你的惯性）。 晚上听到屋外有小婴儿哭泣，不要贸然开门查看，必要的情况下直接报警请警察来查看。 不要贪便宜，有些酒店的价格异常便宜那是有原因的，除了住宿条件比较差之外，可能还有其他的原因，比如地理位置偏、周边区域比较乱，甚至可能房主本来就图谋不轨。我之前租房子的时候看到过一个广告，单间带厕所，价格很便宜，感觉自己捡到了宝。打电话要了具体的地址之后，在去的路上觉得越走越偏，离老远看到那个破旧的公寓楼之后，我转头就走了。位置偏远和条件差先放一边，我首先觉得这里边搞不好是个传销窝点。 如果一个人单独租房子而且在阳台晾衣服的话，除了自己的衣服，也可以穿插放几件明显的男士衣服，这样不怀好意的人在外边观察的时候，不会觉得你是一个女孩单独居住。 如果有人在门把手、信箱中投放广告，记得要及时清理，入室盗窃的罪犯可能会以此判断某家人是否近期不在家。 网购收到包裹的包装盒、收到的信件，要把个人信息（比如姓名、详细地址、手机号以及各种条形码和二维码）撕去后再扔掉 防范性侵 首要原则：再熟悉的异性朋友也是异性朋友，也不能完全放松警惕。 避免和异性朋友在密闭房间单独相处太长时间，尽量控制在30分钟之内。 醉酒绝对不是一个好主意，尤其是当有一个或者几个异性朋友在场的时候。不管遇到多大的事情，不管是多开心还是多难过，别喝太多。因为一旦你喝醉了，很多事情就不受你控制了。 参加聚会或者去酒吧，（如果不是跟非常靠谱的朋友一起），去卫生间之前喝完自己的饮品。回来之后再点新的，以免你不在的时候别人趁机在你的饮品里下药。 有人建议说女孩应该随身备一个安全套，在非常极端的情况下，如果真的无法逃脱，也要避免疾病传播。这个想法出发点是好的，不过具体情况各位自己决定吧。 呼救 遇到抢劫、小偷以及性侵等时，首先要让自己保持冷静。如果对方手中有凶器而且离你很近，并且周围没有其他人能及时伸出援手时，应避免激怒他做出极端行为，之后择机呼救。 如果坏人离你有一定距离，尽最大努力逃脱、呼救、或者躲到人多的安全地带。 如果是发生在街头的强行拉拽（比如在路上强行将你拉向某个地方，或者试图将你强行拽入他们的汽车），在确保自身安全不受凶器威胁的前提下，尽最大努力挣脱或者呼救，忽略一切可能引起的财产损失。例如大声告诉路人你们不认识、破坏路边摊位和行人的物品、用力踢停着的汽车使警报响起来，砸响最近的火警安全警报等，引起别人的注意。 和颐酒店的案例中，那个女孩一直被歹徒拖着走，还好她当时机智地选择了躺在地上。女孩子根本没有力气去和强壮的男性相抗衡，对于我们来说，最好的办法就是躺下来，然后抱住头左右打滚，对方很难对你做出重大伤害。因为，即使是在柔道比赛中，如果一个选手躺下，对方基本就拿你没办法了。在很多影视剧中，主人公被很多人围攻，用的也是这一招。 而五星级酒店绑架事件，那个女孩是用高跟鞋砸响了酒店的火警才逃过一劫的。 在遇害呼救时，有很多歹徒都会伪装成男朋友或老公在和你吵架，酒店工作人员或者路人觉得不好干预别人的家事就不敢出手相助。美国心理学家曾经给出了一个标准化的指导建议：如果遇到这样的社会救助，你不要面对所有人呼救，而是要坚定地指定其中一个人来救你。指定人群中的某一个人说，就是你，过来救我。 类似的求生小技巧其实还有很多，比如四周没人的时候，喊“着火了”会比喊“救命啊”更管用。 反抗 永远记住，胳膊肘是你身上最强壮的地方。如果能用，一定要用。 面部（尤其是眼睛），裆部和腋下都是比较脆弱的地方，如果需要反抗，照着这些要害出手（平时和朋友打闹要小心避开这些部位）。 如果对方有枪，那不要贸然逃跑。时机合适的时候果断逃跑，而且不要沿着直线跑，随时改变方向，因为你跑不过子弹。 如果劫匪问你要钱包，不要递给他，拿起钱包向远处丢。一般情况下，他会对你的钱包比对你更有兴趣，等他往那个方向转的时候，你要向相反的方向拼命地跑。（这条我个人不完全赞同，需要分情况使用。不过我特别赞成的是：如果遇到抢钱的，就给他他想要的财物、手机等，你的安全比什么都重要，避免无谓的争执和身体接触。） 如果你被丢进了后车厢，那么你要使劲踢后车灯的地方。等后车灯被踢掉以后，把你的胳膊从那个洞伸出去挥舞。开车人看不到你，但是别的车能看到，这个曾经挽救过生命。 后续 到达安全区域之后，及时和家人朋友联系，或者和警察联系。 及时报案，虽然你可能没有被抢劫很多财物，但是如果你选择沉默，其他人可能会成为下一个受害者。 受到性侵后不要因为觉得自己“很脏”而急着去洗澡，保留好证据，及时报案。 必要时向心理医生求助，进行心理干预和辅导。遇到坏人不是你的错，你是应该受到大家保护和关爱的。 被抢劫后及时挂失信用卡、银行卡和证件等，避免二次损失。即使记不得自己的卡号、密码等信息，也要第一时间跟银行联系，不要拖着。 相关文章及链接巴黎遇险，中国姑娘的真实遭遇！超级网红被抢不是意外，讲真，任何细节都可能出卖你刚刚！章莹颖马上二次聆讯，嫌疑人或将保释，章莹颖遇害背后的真相耐人深思【提醒】一位退休公安人员透漏的秘密，知道的人越多越好！]]></content>
      <categories>
        <category>X信息汇总</category>
      </categories>
      <tags>
        <tag>knowledgebase</tag>
        <tag>女孩</tag>
        <tag>安全建议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PEP-8-—-Style-Guide-for-Python-Code-(PEP8-—-Python代码风格指南)]]></title>
    <url>%2FIT-PEP-8-%E2%80%94-Style-Guide-for-Python-Code-PEP8-%E2%80%94-Python%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[前言本篇文章是对Python官网上的代码风格指南的翻译和注解。虽然网上已经有很多类似的翻译了，我还是希望通过自己进行翻译的方式加深对指南的理解。本文更多注重于内容的翻译，所以没有特别多的辞藻修饰，文中若有疏漏和不妥之处，欢迎大家批评指正。本文没有完全翻译结束，近期会慢慢完善。 PEP: 8 Title: Style Guide for Python Code Author: Guido van Rossum , Barry Warsaw , Nick Coghlan Status: Active Type: Process Created: 05-Jul-2001 Post-History: 05-Jul-2001, 01-Aug-2013 Introduction 介绍This document gives coding conventions for the Python code comprising the standard library in the main Python distribution. Please see the companion informational PEP describing style guidelines for the C code in the C implementation of Python [1]. 本文介绍的Python编程规范适用于Python主发行版中标准库。对于在Python中应用C代码的编程规范，请参见相关PEP风格指南。 This document and PEP 257 (Docstring Conventions) were adapted from Guido’s original Python Style Guide essay, with some additions from Barry’s style guide [2]. 本文及PEP257（Docsring 规范）改编自Guido的Python风格介绍指南原文，并增添了Barry的风格指南的相关内容。 This style guide evolves over time as additional conventions are identified and past conventions are rendered obsolete by changes in the language itself. 本风格指南随着时间不断发展，因为新的规范被认可而过时的规范会随着语言自身的变化而被废弃。 Many projects have their own coding style guidelines. In the event of any conflicts, such project-specific guides take precedence for that project. 许多项目有它们自己的代码风格指南。当本文档和它们有冲突时，应优先使用该项目的特定指南。 A Foolish Consistency is the Hobgoblin of Little Minds 盲目的一致性是头脑简单的妖怪[注:标题出自艾默生的《Self-Reliance》] One of Guido’s key insights is that code is read much more often than it is written. The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code. As PEP 20 says, “Readability counts”. Guido的主要洞见之一是，代码被读的次数远多于被写的次数。本文提供的指南旨在提高代码的可读性并使浩瀚的Python代码保持一致性。 A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important. 风格指南讲的是一致性。和本指南保持一致很重要。在项目内保持一致更重要。而在同一个模块或函数内保持一致性是最重要的。 However, know when to be inconsistent — sometimes style guide recommendations just aren’t applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don’t hesitate to ask! 然而，要明白什么时候需要不一致 — 有时风格指南的推荐就是没法用。 如果你有所怀疑，则使用你的最佳判断。参考一下其他的例子并决定怎么看起来最好。并且，别犹豫，尽管问。 In particular: do not break backwards compatibility just to comply with this PEP! 特别的：不要仅仅为了遵守这篇PEP指南而破坏代码的向后兼容性。 Some other good reasons to ignore a particular guideline: 其他可以忽略某个指南的好理由： When applying the guideline would make the code less readable, even for someone who is used to reading code that follows this PEP. 如果使用该指南会降低代码的可读性，甚至对那些习惯于使用本PEP指南的人。 To be consistent with surrounding code that also breaks it (maybe for historic reasons) — although this is also an opportunity to clean up someone else’s mess (in true XP style). 为了与周围没有遵守该指南的代码保持一致（也许由于历史原因）–尽管这也许是个清理别人混乱代码的机会。 Because the code in question predates the introduction of the guideline and there is no other reason to be modifying that code. 该代码的编写早于指南并且没有特殊原因需要修改这个代码。 When the code needs to remain compatible with older versions of Python that don’t support the feature recommended by the style guide. 当代码需要与不支持风格指南中推荐的特征的早期Python版本保持兼容性时。 Code lay-out 代码布局Indentation 缩进Use 4 spaces per indentation level. 每个缩进级别使用4个空格 Continuation lines should align wrapped elements either vertically using Python’s implicit line joining inside parentheses, brackets and braces, or using a hanging indent[7]. When using a hanging indent the following should be considered; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line. 连续行需要对齐其所包含的元素，或者垂直的使用Python的隐式缩进，对齐圆括号、方括号及花括号，或者使用悬挂缩进。当使用悬挂缩进时，需考虑以下因素：第一行不应包含参数，后续的行应该增加一级缩进： Yes 正确: Aligned with opening delimiter.和开放的符号对齐（隐式缩进）foo = long_function_name(var_one, var_two, var_three, var_four) More indentation included to distinguish this from the rest.使用更多的缩进以便与后面的代码区分（悬挂缩进）def long_function_name( var_one, var_two, var_three, var_four): print(var_one) Hanging indents should add a level.悬挂缩进需要增加一级缩进foo = long_function_name( var_one, var_two, var_three, var_four) No 错误: # Arguments on first line forbidden when not using vertical alignment. # 如果不使用垂直对齐（隐式缩进），第一行禁止使用参数 foo = long_function_name(var_one, var_two, var_three, var_four) # Further indentation required as indentation is not distinguishable. # （悬挂缩进）需要进一步缩进以便与后续代码（print）进行区分 def long_function_name( var_one, var_two, var_three, var_four): print(var_one) The 4-space rule is optional for continuation lines. 对于连续的行，4-空格 规则不是强制的。 Optional 可选方案（此处2-空格）: # Hanging indents *may* be indented to other than 4 spaces. foo = long_function_name( var_one, var_two, var_three, var_four) When the conditional part of an if-statement is long enough to require that it be written across multiple lines, it’s worth noting that the combination of a two character keyword (i.e. if), plus a single space, plus an opening parenthesis creates a natural 4-space indent for the subsequent lines of the multiline conditional. This can produce a visual conflict with the indented suite of code nested inside the if-statement, which would also naturally be indented to 4 spaces. This PEP takes no explicit position on how (or whether) to further visually distinguish such conditional lines from the nested suite inside the if-statement. Acceptable options in this situation include, but are not limited to: 当if语句中的条件部分长到需要使用多行时，不值得结合使用一个2字母的关键字（比如 if）、一个空格以及开放的括号独占一行，然后（多）缩进4个空格开始后续的条件语句。由于if语句内部本身要缩进4个空格，再次缩进会造成视觉上的冲突。本PEP没有明确指出怎么（或者是否）要进一步在视觉上区分这些条件部分及if-语句内嵌套的部分。在这种情况下可接受的选择包括但不限于以下几种： # No extra indentation. # 无额外缩进 if (this_is_one_thing and that_is_another_thing): do_something() # Add a comment, which will provide some distinction in editors # 添加一个注释，由其提供编辑器内的区分 # supporting syntax highlighting. if (this_is_one_thing and that_is_another_thing): # Since both conditions are true, we can frobnicate. do_something() # Add some extra indentation on the conditional continuation line. # 在条件部分的连续行增加额外缩进 if (this_is_one_thing and that_is_another_thing): do_something() (Also see the discussion of whether to break before or after binary operators below.) （也参见下边关于在二元运算符之前或之后换行的讨论） The closing brace/bracket/parenthesis on multiline constructs may either line up under the first non-whitespace character of the last line of list, as in: 横跨多行的大括号/方括号/括号可以要么闭合于最后一行的第一个非空格元素，如下： my_list = [ 1, 2, 3, 4, 5, 6, ] result = some_function_that_takes_arguments( 'a', 'b', 'c', 'd', 'e', 'f', ) or it may be lined up under the first character of the line that starts the multiline construct, as in: 或者与这个多行结构的开始行的第一个字符对齐，如下： my_list = [ 1, 2, 3, 4, 5, 6, ] result = some_function_that_takes_arguments( 'a', 'b', 'c', 'd', 'e', 'f', ) Tabs or Spaces? 制表符还是空格？Spaces are the preferred indentation method. 推荐使用空格进行缩进。 Tabs should be used solely to remain consistent with code that is already indented with tabs. 制表符仅在需要与已经使用制表符进行缩进的代码保持一致时才使用。 Python 3 disallows mixing the use of tabs and spaces for indentation. Python 3 不允许在缩进时混合使用制表符和空格。 Python 2 code indented with a mixture of tabs and spaces should be converted to using spaces exclusively. Python 2 代码中本来混合使用制表符和空格进行缩进的，需要全部转换为使用空格进行缩进。 When invoking the Python 2 command line interpreter with the -t option, it issues warnings about code that illegally mixes tabs and spaces. When using -tt these warnings become errors. These options are highly recommended! 当使用 -t 选项运行Python 2 代码时，会对非法混用制表符和空格的代码进行警告。 当使用 -tt 选项时，这些警告会变成报错。非常推荐使用这些选项。 Maximum Line Length 每行最大长度Limit all lines to a maximum of 79 characters. 每行的最大长度限定于79字符。 For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to 72 characters. 对于含有较少结构限制的连续大块文字（docstrings或者注释），行的长度应该限定于72字符。 Limiting the required editor window width makes it possible to have several files open side-by-side, and works well when using code review tools that present the two versions in adjacent columns. 对编辑器窗口的宽度进行限定后可以并排打开若干文件，并且便于使用代码检查工具时在相邻的两列展示不同的版本。 The default wrapping in most tools disrupts the visual structure of the code, making it more difficult to understand. The limits are chosen to avoid wrapping in editors with the window width set to 80, even if the tool places a marker glyph in the final column when wrapping lines. Some web based tools may not offer dynamic line wrapping at all. 大部分工具的默认换行功能会破坏代码的可视化结构，从而使代码更加难以理解。选择上述代码长度的限制是为了避免编辑窗口宽度为80字符时的自动换行，尽管工具会自动换行时候的最后一列设置一个标记。有些基于网页的工具也许根本就不提供自动换行功能。 Some teams strongly prefer a longer line length. For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the nominal line length from 80 to 100 characters (effectively increasing the maximum length to 99 characters), provided that comments and docstrings are still wrapped at 72 characters. 有些团队强烈推荐较长的代码行长度。如果完全或者主要负责维护代码的队伍对此达成一致，那么将代码行长度从80提高到100字符也是可以的（有效的将最大行长度提高的99字符），同时应该确保注释和docstring仍然在72字符处换行。 The Python standard library is conservative and requires limiting lines to 79 characters (and docstrings/comments to 72). Python的标准库是保守的并且要求行长度限定为最大79字符（并且docstrings和注释最大72字符）。 The preferred way of wrapping long lines is by using Python’s implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation. 比较推荐的续行方式是在Python的圆括号、方括号和大括号内进行隐式续行。括号中的较长代码行可以折成多行。这种换行方式比使用反斜杠进行续行更受推荐。 Backslashes may still be appropriate at times. For example, long, multiple with-statements cannot use implicit continuation, so backslashes are acceptable: 有时使用反斜杠也比较合适。比如，在较长的多行with语句中，不能使用隐式续行的时候，反斜杠也是可以接受的： with open('/path/to/some/file/you/want/to/read') as file_1, \ open('/path/to/some/file/being/written', 'w') as file_2: file_2.write(file_1.read()) (See the previous discussion on multiline if-statements for further thoughts on the indentation of such multiline with-statements.) （查看之前讨论的多行if语句深入思考对这种多行with语句的缩进。） Another such case is with assert statements. 另一种类似情况是对assert语句。 Make sure to indent the continued line appropriately. 确保对连续的行进行合适的缩进。 Should a line break before or after a binary operator? 应该在二元运算符之前还是之后换行？For decades the recommended style was to break after binary operators. But this can hurt readability in two ways: the operators tend to get scattered across different columns on the screen, and each operator is moved away from its operand and onto the previous line. Here, the eye has to do extra work to tell which items are added and which are subtracted: 几十年来推荐的风格是在二元运算符之后换行。但是这有可能在两方面影响可读性：运算符会漫布于屏幕上不同的行，另外运算符远离它的算子并且成为较前一行。这样，眼睛就必须弄明白哪些项被加，哪些项被减： # No: operators sit far away from their operands # 不要：运算符远离他们的算子 income = (gross_wages + taxable_interest + (dividends - qualified_dividends) - ira_deduction - student_loan_interest) To solve this readability problem, mathematicians and their publishers follow the opposite convention. Donald Knuth explains the traditional rule in his Computers and Typesetting series: “Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations” [3]. 为了解决这个可读性问题，数学家和出版人追从相反的约定。Donald Knuth在他的Computers and Typesetting系列中解释了传统的原则: 尽管一段之内的公式常在二元运算符和关系之换行，展示出来的公式常常在二元运算符之前换行。 Following the tradition from mathematics usually results in more readable code: 根据数学家的传统常常可以得到更具可读性的代码： # Yes: easy to match operators with operands # 正确：便于连接运算符和算子 income = (gross_wages + taxable_interest + (dividends - qualified_dividends) - ira_deduction - student_loan_interest) In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth’s style is suggested. 在Python代码中，在二元运算符之前或者之后进行换行都是允许的，只要该约定保持一致性即可。对于新的代码，推荐使用Knuth的风格。 Blank Lines 空行Surround top-level function and class definitions with two blank lines. 使用两个空行来分隔最高级的函数和类的定义。 Method definitions inside a class are surrounded by a single blank line. 使用一个空行来分隔一个类之中的方法定义。 Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations). 额外的空行也许可以（谨慎地）用于分隔不同的某组相关的函数。在一系列单行代码之间（比如一系列dummy）可以省略空行。 Use blank lines in functions, sparingly, to indicate logical sections. 在函数中（谨慎的）使用空行来区分不同的逻辑块。 Python accepts the control-L (i.e. ^L) form feed character as whitespace; Many tools treat these characters as page separators, so you may use them to separate pages of related sections of your file. Note, some editors and web-based code viewers may not recognize control-L as a form feed and will show another glyph in its place. Python接受control-L (即 ^L)作为空格；许多工具把这些作为分页符，因此你可以用它们来对文件中的相关块进行分页。注意，有些编辑器和基于网页的代码浏览器也许不把control-L识别为换页符，它们也许会被显示为其他符号。 Source File Encoding 源文件编码Code in the core Python distribution should always use UTF-8 (or ASCII in Python 2). Python核心发行版中的代码应该保持使用UTF-8（或者Python2使用ASCII）。 Files using ASCII (in Python 2) or UTF-8 (in Python 3) should not have an encoding declaration. 使用ASCII（Python 2）和UTF-8 （Python 3）的文件不需要编码声明。 In the standard library, non-default encodings should be used only for test purposes or when a comment or docstring needs to mention an author name that contains non-ASCII characters; otherwise, using \x, \u, \U, or \N escapes is the preferred way to include non-ASCII data in string literals. 在标准库中，非默认的编码应该仅用于测试目的或者当注释或docstring需要提及含有非ASCII字符的作者名字时；否则，推荐使用\x, \u, \U 和 \N 等转义符是表达字符串中的非ASCII数据。 For Python 3.0 and beyond, the following policy is prescribed for the standard library (see PEP 3131): All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible (in many cases, abbreviations and technical terms are used which aren’t English). In addition, string literals and comments must also be in ASCII. The only exceptions are (a) test cases testing the non-ASCII features, and (b) names of authors. Authors whose names are not based on the Latin alphabet (latin-1, ISO/IEC 8859-1 character set) MUST provide a transliteration of their names in this character set. 对于Python 3.0以上的版本，标准库遵循以下原则（参见 PEP 3131）：标准库中的所有标识符都必须仅使用ASCII标识符，并且在任何可能的情况下应该使用英语（在很多情况下，缩写和技术名词不是英语）。此外，字符串和注释也必须是ASCII，仅有两种例外情况（a）测试情况下进行非ASCII特征进行测试， （b）作者名字。当作者的名字不是基于拉丁字母时（latin-1, ISO/IEC 8859-1 character set），作者必须提供他们名字的拉丁字符音译。 Open source projects with a global audience are encouraged to adopt a similar policy. 鼓励面向全世界开源的项目使用类似原则。 Imports Imports should usually be on separate lines, e.g.: 通常Imports应该在单独的一行，比如： Yes: import os import sys No: import sys, os It’s okay to say this though: 尽管如此，如下语句也可以： from subprocess import Popen, PIPE Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants. Imports语句总是在文件的最顶端，仅在模块注释和docstring之后，并且在全局模块和常量之前： Imports should be grouped in the following order: Imports应该按以下顺序进行分组： standard library imports 标准库imports related third party imports 相关第三方 imports local application/library specific imports 本地应用和库的特定imports You should put a blank line between each group of imports. 你应该在每组之间加入空行。 Absolute imports are recommended, as they are usually more readable and tend to be better behaved (or at least give better error messages) if the import system is incorrectly configured (such as when a directory inside a package ends up on sys.path): 推荐使用绝对imports，因为如果import系统正确配置的话（比如包内的路径以sys.path），通常来说使用绝对imports更加具有可读性而且表现更好 （至少会提供更好的报错信息） import mypkg.sibling from mypkg import sibling from mypkg.sibling import example However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose: 然而，除了绝对imports之外，详尽的相对imports也是可以接受的，特别是当使用复杂的包时当绝对imports变得不必要的冗长的时候， from . import sibling from .sibling import example Standard library code should avoid complex package layouts and always use absolute imports. 标准库代码应该避免复杂的包并且始终使用绝对imports。 Implicit relative imports should never be used and have been removed in Python 3. 不明确的相对引用应该从不被使用，并且在Python 3中已经被移除。 When importing a class from a class-containing module, it’s usually okay to spell this: 当从一个含有类的模块中import一个类的时候，以下语句也可以： from myclass import MyClass from foo.bar.yourclass import YourClass If this spelling causes local name clashes, then spell them 如果以下拼写造成了本地变量名冲突的话，则使用： import myclass import foo.bar.yourclass and use “myclass.MyClass” and “foo.bar.yourclass.YourClass”. 并且用 “myclass.MyClass” 和 “foo.bar.yourclass.YourClass” Wildcard imports (from import ) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools. There is one defensible use case for a wildcard import, which is to republish an internal interface as part of a public API (for example, overwriting a pure Python implementation of an interface with the definitions from an optional accelerator module and exactly which definitions will be overwritten isn’t known in advance). 应该避免使用通配符import， (from import )，因为会造成命名空间中的名称不清晰，给读者和许多自动化工具造成困扰。在一种情况下可以使用通配符import，也就是当把一个内部接口作为一个公共API重新发布的时候（比如，通过一个可选加速器模块覆盖一个纯Python实现的接口，并且哪些定义会被覆盖提前并不能预知。） When republishing names this way, the guidelines below regarding public and internal interfaces still apply. 当这样重复发布名称时，以下关于公共和内部接口的指南依然适用。 Module level dunder names 模块层dunder名称Module level “dunders” (i.e. names with two leading and two trailing underscores) such as all, author, version, etc. should be placed after the module docstring but before any import statements exceptfrom future imports. Python mandates that future-imports must appear in the module before any other code except docstrings. 模块层的“dunders” （即名称中含有两个前和两个后下划线）比如 all, author, version 等，应该放置于模块的文档说明之后但是在任何除了from future imports之外的import语句之前。Python要求future-imports必须比除了文档说明之外的任何代码更早出现在模块。 For example: 例如： """This is the example module. This module does stuff. """ from __future__ import barry_as_FLUFL __all__ = ['a', 'b', 'c'] __version__ = '0.1' __author__ = 'Cardinal Biggles' import os import sys String Quotes 字符串引用In Python, single-quoted strings and double-quoted strings are the same. This PEP does not make a recommendation for this. Pick a rule and stick to it. When a string contains single or double quote characters, however, use the other one to avoid backslashes in the string. It improves readability. 在Python中，单引号字符串和双引号字符串是相同的。本PEP没有对此进行推荐。可以自选一个并且保持一致。然而，如果一个字符串含有单引号或者双引号，使用另一个来避免反斜线。这可以提高可读性。 For triple-quoted strings, always use double quote characters to be consistent with the docstring convention in PEP 257. 对于三引号，总是使用双引号字符以便与 PEP 257中的文档说明的约定保持一致。 Whitespace in Expressions and Statements 表达式和语句中的空格Pet PeevesAvoid extraneous whitespace in the following situations: 避免在如下情况使用无关的空格： Immediately inside parentheses, brackets or braces. 括号，方括号和大括号中直接的空格。 Yes: spam(ham[1], {eggs: 2}) No: spam( ham[ 1 ], { eggs: 2 } ) Between a trailing comma and a following close parenthesis. 在尾随逗号和结束括号之间。 Yes: foo = (0,) No: bar = (0, ) Immediately before a comma, semicolon, or colon: 直接在逗号、分号和冒号之前。 Yes: if x == 4: print x, y; x, y = y, x No: if x == 4 : print x , y ; x , y = y , x However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. Exception: when a slice parameter is omitted, the space is omitted. 然而，在切片中冒号类似于二元运算符，应该在其两边使用相同数量的空格（把它作为拥有最低优先级的运算符）。在扩展切片中，两个冒号必须有相同的空格。特殊情况：如果一个切片参数被省略了，空格也省略。 Yes: ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:] ham[lower:upper], ham[lower:upper:], ham[lower::step] ham[lower+offset : upper+offset] ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)] ham[lower + offset : upper + offset] No: ham[lower + offset:upper + offset] ham[1: 9], ham[1 :9], ham[1:9 :3] ham[lower : : upper] ham[ : upper] Immediately before the open parenthesis that starts the argument list of a function call: 直接在一个函数的开始括号之前。 Yes: spam(1) No: spam (1) Immediately before the open parenthesis that starts an indexing or slicing: 直接在一个索引或者切片的开始括号之前。 Yes: dct['key'] = lst[index] No: dct ['key'] = lst [index] More than one space around an assignment (or other) operator to align it with another. 为了对齐其他参数而使用多于一个空格。 Yes: x = 1 y = 2 long_variable = 3 No: x = 1 y = 2 long_variable = 3 Other Recommendations 其他推荐 Avoid trailing whitespace anywhere. Because it’s usually invisible, it can be confusing: e.g. a backslash followed by a space and a newline does not count as a line continuation marker. Some editors don’t preserve it and many projects (like CPython itself) have pre-commit hooks that reject it. 避免在任何地方使用尾空格。因为它是不可见的，这会造成困扰：比如一个反斜杠后面跟了一个空格因此新的一行不被认为是新行。有些编辑器不确保其正确运行，许多项目（比如CPython本身）有pre-commit hooks可以拒绝此类编译。 Always surround these binary operators with a single space on either side: assignment (=), augmented assignment (+=, -=etc.), comparisons (==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not), Booleans (and, or, not). 总是在这些二元运算符两侧使用单独空格：等号（=），增量赋值负号 (+=, -=etc.), 比较符号(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not), 布尔运算符(and, or, not). If operators with different priorities are used, consider adding whitespace around the operators with the lowest priority(ies). Use your own judgment; however, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator. 如果使用不同优先级的运算符，考虑给低优先级的运算符增加空格。自行判断，然而，永远不要使用多于一个空格，并且总是在二元运算符的两侧使用相同数量的空格。 Yes: i = i + 1 submitted += 1 x = x*2 - 1 hypot2 = x*x + y*y c = (a+b) * (a-b) No: i=i+1 submitted +=1 x = x * 2 - 1 hypot2 = x * x + y * y c = (a + b) * (a - b) Don’t use spaces around the = sign when used to indicate a keyword argument or a default parameter value.不要在用于定义函数关键字默认值的等号两侧使用空格。 Yes: def complex(real, imag=0.0): return magic(r=real, i=imag) No: def complex(real, imag = 0.0): return magic(r = real, i = imag) Function annotations should use the normal rules for colons and always have spaces around the -&gt; arrow if present. (SeeFunction Annotations below for more about function annotations.) 函数annotations 应该使用平常的冒号规则并且如果使用 -&gt; 的话需要配合空格。 Yes: def munge(input: AnyStr): ... def munge() -> AnyStr: ... No: def munge(input:AnyStr): ... def munge()->PosInt: ... When combining an argument annotation with a default value, use spaces around the = sign (but only for those arguments that have both an annotation and a default). 当同时使用annotation和默认值的时候，给等号两侧加上空格 （但是只给同时有annotation和默认值的等号加空格）。 Yes: def munge(sep: AnyStr = None): ... def munge(input: AnyStr, sep: AnyStr = None, limit=1000): ... No: def munge(input: AnyStr=None): ... def munge(input: AnyStr, limit = 1000): ... Compound statements (multiple statements on the same line) are generally discouraged. 通常不推荐使用混合语句（同一行多个语句）。 Yes: if foo == 'blah': do_blah_thing() do_one() do_two() do_three() Rather not: if foo == 'blah': do_blah_thing() do_one(); do_two(); do_three() While sometimes it’s okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements. Also avoid folding such long lines! 尽管有时可以将if/for/while和一小部分语句放在同一行，永远不要将含有多语句的指令放在同一行。同时也避免折叠这样的很长的行 [注：我理解是避免从这样比较长的行的某一部分进行折叠]。 Rather not最好不要: if foo == 'blah': do_blah_thing() for x in lst: total += x while t < 10: t = delay() Definitely not 绝对不要: if foo == 'blah': do_blah_thing() else: do_non_blah_thing() try: something() finally: cleanup() do_one(); do_two(); do_three(long, argument, list, like, this) if foo == 'blah': one(); two(); three() When to use trailing commasTrailing commas are usually optional, except they are mandatory when making a tuple of one element (and in Python 2 they have semantics for the print statement). For clarity, it is recommended to surround the latter in (technically redundant) parentheses. 尾逗号通常是可选的，仅在建立一个元素的tuple时尾逗号是必须的（在Python 2中它们对于print语句是有语义的）。准确的说，推荐使用（冗余的）括号把字母括起来。 Yes 正确: FILES = ('setup.cfg',) OK, but confusing 可行但是容易混淆: FILES = 'setup.cfg', When trailing commas are redundant, they are often helpful when a version control system is used, when a list of values, arguments or imported items is expected to be extended over time. The pattern is to put each value (etc.) on a line by itself, always adding a trailing comma, and add the close parenthesis/bracket/brace on the next line. However it does not make sense to have a trailing comma on the same line as the closing delimiter (except in the above case of singleton tuples). 当尾逗号是冗余的时候，它们常常在使用版本控制系统时有用，或者当一个由数值、语句或者导入的项组成的列表需要随着时间不断扩展的时候。这个布局可以把每个数值（等等）单独放在一行，并加上尾逗号以及在下一行加上闭合括号/方括号/大括号。然而，不建议将尾逗号和闭合括号放在同一行（除了前边说的单元素tuple的情况）。 Yes 正确: FILES = [ 'setup.cfg', 'tox.ini', ] initialize(FILES, error=True, ) No 错误: FILES = ['setup.cfg', 'tox.ini',] initialize(FILES, error=True,) Comments 注释Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes! 错误的注释还不如没有注释。总是在改变代码时一并更新注释。 Comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter (never alter the case of identifiers!). 注释应该是完整的橘子。第一个单词需要大写首字母，除非是有一个由小写字母开头的标识符（不要改变标识符的大小写）。 Block comments generally consist of one or more paragraphs built out of complete sentences, with each sentence ending in a period. 注释块通常由一到多段完整的句子组成，每个句子由句号结尾。 You should use two spaces after a sentence-ending period in multi- sentence comments, except after the final sentence. 除了最后一句外，在多个句子组成的注释的每个句末的句号后边使用2个空格。 When writing English, follow Strunk and White. 如果注释为英语，根据Strunk and White的语法规则。 Python coders from non-English speaking countries: please write your comments in English, unless you are 120% sure that the code will never be read by people who don’t speak your language. 对于非英语国家的编程员：请用英语书写注释，除非你120%的确定这个代码永远不会被不懂你母语的人读到。 Block Comments 注释块Block comments generally apply to some (or all) code that follows them, and are indented to the same level as that code. Each line of a block comment starts with a # and a single space (unless it is indented text inside the comment). 注释块通常应用于紧随它的部分（或者所有）代码，并且他们应该和这些代码有相同的缩进。注释块的每一行由 # 和一个空格开始（除非是注释中已经缩进的文字） Paragraphs inside a block comment are separated by a line containing a single #. 注释块内部的各段由一个单个的 # 进行分隔。 Inline Comments 行内注释Use inline comments sparingly. 小心地使用行内注释。 An inline comment is a comment on the same line as a statement. Inline comments should be separated by at least two spaces from the statement. They should start with a # and a single space. 行内注释是指与指令在同一行的注释。行内注释需要与指令至少相隔两个空格。他们应该由一个#和一个空格开始。 Inline comments are unnecessary and in fact distracting if they state the obvious. Don’t do this: 行内注释不必要，而且事实上很让人闹心，如果它们只是陈述明显的事实。不要像这样： x = x + 1 # Increment x But sometimes, this is useful: 但是有时候也是有用的： x = x + 1 # Compensate for border [注：个人觉得这个自己把握，不需要用行内注释说明运算本身的作用，而可以用行内注释说明这行指令的潜在意图，尤其是一些特殊的意图和想法。对于有些想法，也许过了一段时间再看代码就不明白为什么当时要这么做了，那就应该注释下来。] Documentation Strings 文档字符串Conventions for writing good documentation strings (a.k.a. “docstrings”) are immortalized in PEP 257. 关于怎么写好文档字符串（a.k.a. “docstrings”）的约定详见 PEP 257。 Write docstrings for all public modules, functions, classes, and methods. Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. This comment should appear after the def line. 为所有的公共模块、函数和方法写文档字符串。对于非公共的方法，文档字符串不是必须的，但是你应该有一个描述这个方法的注释。这个注释应该出现在def行下方。 PEP 257 describes good docstring conventions. Note that most importantly, the “”” that ends a multiline docstring should be on a line by itself, e.g.: PEP 257 阐述了好的文档字符串的相关约定。注意最重要的是，用以结束一个多行的文档字符串的“””应该自成一行，比如： """Return a foobang Optional plotz says to frobnicate the bizbaz first. """ [注：第一个"""开始了一段文档字符串，可以不自成一行。但是第二个"""用以结束文档字符串，因此必须自成一行。] For one liner docstrings, please keep the closing “”” on the same line. 对于一样的文档字符串，请把用以结束的“””写在同一行。 Naming Conventions 命名约定The naming conventions of Python’s library are a bit of a mess, so we’ll never get this completely consistent — nevertheless, here are the currently recommended naming standards. New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred. Python的命名约定有些混乱， 所以我们从没就这点达成完全的一致 — 虽然如此，这有些目前推荐的命名标准。 新的模块和包 （包括第三方框架）应该遵从这些标准，但是对于已经存在的具有不同风格的库，建议保持内部的一致性。 Overriding Principle 首要原则Names that are visible to the user as public parts of the API should follow conventions that reflect usage rather than implementation. 对用户可见的API的公共部分的命名应该反映它的用途而不是其实现。 Descriptive: Naming Styles 描述：命名风格There are a lot of different naming styles. It helps to be able to recognize what naming style is being used, independently from what they are used for. 现存很多不同的命名风格。如果能不依赖于它们的用途而分辨出使用了哪种命名风格，会很有帮助。 The following naming styles are commonly distinguished: 通常可以区分如下命名风格： b (single lowercase letter) 单个小写字母 B (single uppercase letter) 单个大写字母 lowercase 小写字母 lower_case_with_underscores 带下划线的小写字母 UPPERCASE 大写字母 UPPER_CASE_WITH_UNDERSCORES 带下划线的大写字母 CapitalizedWords (or CapWords, or CamelCase — so named because of the bumpy look of its letters [4]). This is also sometimes known as StudlyCaps.单词首字母大写 （或者叫CapWord， 或者CamelCase — 这样叫是因为看起来像驼峰 [4]）。这种方法有时也叫StudlyCaps. Note: When using acronyms in CapWords, capitalize all the letters of the acronym. Thus HTTPServerError is better than HttpServerError. 注意：当在CapWords中使用缩写的时候，缩写的所有字母需要大写。 因此HTTPServerError 好于 HttpServerError。 mixedCase (differs from CapitalizedWords by initial lowercase character!) 混合方式（不同于CapitalizedWords中默认为小写字母） Capitalized_Words_With_Underscores (ugly!) 单词首字母大写加下划线（难看！） There’s also the style of using a short unique prefix to group related names together. This is not used much in Python, but it is mentioned for completeness. For example, the os.stat() function returns a tuple whose items traditionally have names like st_mode, st_size, st_mtime and so on. (This is done to emphasize the correspondence with the fields of the POSIX system call struct, which helps programmers familiar with that.) 也有一种风格是使用一个短的前缀将相关的名称分组。这种方法在Python中不常用，为了完整起见提及一下。例如，os.stat()函数返回一个tuple，这个tuple的元素传统上命名为st_mode, st_size, st_mtime等。（这样做是为了强调与POSIX系统调用结构之间的关联，藉此帮助程序员对它熟悉。） The X11 library uses a leading X for all its public functions. In Python, this style is generally deemed unnecessary because attribute and method names are prefixed with an object, and function names are prefixed with a module name. X11库使用X作为它所有公共函数的开头。在Python中，这种风格通常不是很必要，因为属性和方法都已经有了对象的前缀，而函数名有模块名作为前缀。 In addition, the following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention): 补充一下，如下特殊格式可以使用开头或结尾的下划线（这些可以和所有的上述约定结合使用） _single_leading_underscore: weak “internal use” indicator. E.g. from M import * does not import objects whose name starts with an underscore. 单下划线开头: “内部使用”的弱标识。比如，from M import * 不能import名字以下划线开头的对象 single_trailing_underscore_: used by convention to avoid conflicts with Python keyword, e.g. Tkinter.Toplevel(master, class_='ClassName') 单下划线结尾：用于避免与Python关键字的约定，比如Tkinter.Toplevel(master, class_='ClassName') double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, boo becomes_FooBar__boo; see below). 双下划线开头：当命名一个类的属性时，触发命名修饰（在FooBar类之内，boo 成为_FooBarboo；见下方） double_leading_and_trailing_underscore: “magic” objects or attributes that live in user-controlled namespaces. E.g. init, import or file. Never invent such names; only use them as documented. 双下划线开头双下划线结尾：“魔术”对象或者属性，存在于用户控制的命名空间。例如init, import 或者 file。永远不要自己创造这样的名称；请按照文档说明进行使用。 Prescriptive: Naming ConventionsNames to AvoidNever use the characters ‘l’ (lowercase letter el), ‘O’ (uppercase letter oh), or ‘I’ (uppercase letter eye) as single character variable names. In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use ‘l’, use ‘L’ instead. ASCII CompatibilityIdentifiers used in the standard library must be ASCII compatible as described in the policy section of PEP 3131. Package and Module NamesModules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged. When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. _socket). Class NamesClass names should normally use the CapWords convention. The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable. Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the CapWords convention used only for exception names and builtin constants. Type variable namesNames of type variables introduced in PEP 484 should normally use CapWords preferring short names: T, AnyStr, Num. It is recommended to add suffixes _co or _contra to the variables used to declare covariant or contravariant behavior correspondingly. Examples: from typing import TypeVar VT_co = TypeVar('VT_co', covariant=True) KT_contra = TypeVar('KT_contra', contravariant=True) Exception NamesBecause exceptions should be classes, the class naming convention applies here. However, you should use the suffix “Error” on your exception names (if the exception actually is an error). Global Variable Names(Let’s hope that these variables are meant for use inside one module only.) The conventions are about the same as those for functions. Modules that are designed for use via from M import * should use the all mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are “module non-public”). Function and variable namesFunction names should be lowercase, with words separated by underscores as necessary to improve readability. Variable names follow the same convention as function names. mixedCase is allowed only in contexts where that’s already the prevailing style (e.g. threading.py), to retain backwards compatibility. Function and method argumentsAlways use self for the first argument to instance methods. Always use cls for the first argument to class methods. If a function argument’s name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption. Thus class_ is better than clss. (Perhaps better is to avoid such clashes by using a synonym.) Method Names and Instance VariablesUse the function naming rules: lowercase with words separated by underscores as necessary to improve readability. Use one leading underscore only for non-public methods and instance variables. To avoid name clashes with subclasses, use two leading underscores to invoke Python’s name mangling rules. Python mangles these names with the class name: if class Foo has an attribute named a, it cannot be accessed by Foo.a. (An insistent user could still gain access by calling Foo._Foo__a.) Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed. Note: there is some controversy about the use of __names (see below). ConstantsConstants are usually defined on a module level and written in all capital letters with underscores separating words. Examples include MAX_OVERFLOW and TOTAL. Designing for inheritanceAlways decide whether a class’s methods and instance variables (collectively: “attributes”) should be public or non-public. If in doubt, choose non-public; it’s easier to make it public later than to make a public attribute non-public. Public attributes are those that you expect unrelated clients of your class to use, with your commitment to avoid backward incompatible changes. Non-public attributes are those that are not intended to be used by third parties; you make no guarantees that non-public attributes won’t change or even be removed. We don’t use the term “private” here, since no attribute is really private in Python (without a generally unnecessary amount of work). Another category of attributes are those that are part of the “subclass API” (often called “protected” in other languages). Some classes are designed to be inherited from, either to extend or modify aspects of the class’s behavior. When designing such a class, take care to make explicit decisions about which attributes are public, which are part of the subclass API, and which are truly only to be used by your base class. With this in mind, here are the Pythonic guidelines: Public attributes should have no leading underscores. If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name. This is preferable to an abbreviation or corrupted spelling. (However, notwithstanding this rule, ‘cls’ is the preferred spelling for any variable or argument which is known to be a class, especially the first argument to a class method.) Note 1: See the argument name recommendation above for class methods. For simple public data attributes, it is best to expose just the attribute name, without complicated accessor/mutator methods. Keep in mind that Python provides an easy path to future enhancement, should you find that a simple data attribute needs to grow functional behavior. In that case, use properties to hide functional implementation behind simple data attribute access syntax. Note 1: Properties only work on new-style classes. Note 2: Try to keep the functional behavior side-effect free, although side-effects such as caching are generally fine. Note 3: Avoid using properties for computationally expensive operations; the attribute notation makes the caller believe that access is (relatively) cheap. If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores. This invokes Python’s name mangling algorithm, where the name of the class is mangled into the attribute name. This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name. Note 1: Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions. Note 2: Name mangling can make certain uses, such as debugging and getattr(), less convenient. However the name mangling algorithm is well documented and easy to perform manually. Note 3: Not everyone likes name mangling. Try to balance the need to avoid accidental name clashes with potential use by advanced callers. Public and internal interfacesAny backwards compatibility guarantees apply only to public interfaces. Accordingly, it is important that users be able to clearly distinguish between public and internal interfaces. Documented interfaces are considered public, unless the documentation explicitly declares them to be provisional or internal interfaces exempt from the usual backwards compatibility guarantees. All undocumented interfaces should be assumed to be internal. To better support introspection, modules should explicitly declare the names in their public API using the all attribute. Setting all to an empty list indicates that the module has no public API. Even with all set appropriately, internal interfaces (packages, modules, classes, functions, attributes or other names) should still be prefixed with a single leading underscore. An interface is also considered internal if any containing namespace (package, module or class) is considered internal. Imported names should always be considered an implementation detail. Other modules must not rely on indirect access to such imported names unless they are an explicitly documented part of the containing module’s API, such as os.path or a package’s init module that exposes functionality from submodules. Programming Recommendations Code should be written in a way that does not disadvantage other implementations of Python (PyPy, Jython, IronPython, Cython, Psyco, and such). For example, do not rely on CPython’s efficient implementation of in-place string concatenation for statements in the form a += b or a = a + b. This optimization is fragile even in CPython (it only works for some types) and isn’t present at all in implementations that don’t use refcounting. In performance sensitive parts of the library, the ‘’.join() form should be used instead. This will ensure that concatenation occurs in linear time across various implementations. Comparisons to singletons like None should always be done with is or is not, never the equality operators. Also, beware of writing if x when you really mean if x is not None — e.g. when testing whether a variable or argument that defaults to None was set to some other value. The other value might have a type (such as a container) that could be false in a boolean context! Use is not operator rather than not … is. While both expressions are functionally identical, the former is more readable and preferred. Yes: if foo is not None: No: if not foo is None: When implementing ordering operations with rich comparisons, it is best to implement all six operations (eq, ne,lt, le, gt, ge) rather than relying on other code to only exercise a particular comparison. To minimize the effort involved, the functools.total_ordering() decorator provides a tool to generate missing comparison methods. PEP 207 indicates that reflexivity rules are assumed by Python. Thus, the interpreter may swap y &gt; x with x &lt; y, y &gt;= xwith x &lt;= y, and may swap the arguments of x == y and x != y. The sort() and min() operations are guaranteed to use the &lt; operator and the max() function uses the &gt; operator. However, it is best to implement all six operations so that confusion doesn’t arise in other contexts. Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier. Yes: def f(x): return 2*x No: f = lambda x: 2*x The first form means that the name of the resulting function object is specifically ‘f’ instead of the generic ‘’. This is more useful for tracebacks and string representations in general. The use of the assignment statement eliminates the sole benefit a lambda expression can offer over an explicit def statement (i.e. that it can be embedded inside a larger expression) Derive exceptions from Exception rather than BaseException. Direct inheritance from BaseException is reserved for exceptions where catching them is almost always the wrong thing to do. Design exception hierarchies based on the distinctions that code catching the exceptions is likely to need, rather than the locations where the exceptions are raised. Aim to answer the question “What went wrong?” programmatically, rather than only stating that “A problem occurred” (see PEP 3151 for an example of this lesson being learned for the builtin exception hierarchy) Class naming conventions apply here, although you should add the suffix “Error” to your exception classes if the exception is an error. Non-error exceptions that are used for non-local flow control or other forms of signaling need no special suffix. Use exception chaining appropriately. In Python 3, “raise X from Y” should be used to indicate explicit replacement without losing the original traceback. When deliberately replacing an inner exception (using “raise X” in Python 2 or “raise X from None” in Python 3.3+), ensure that relevant details are transferred to the new exception (such as preserving the attribute name when converting KeyError to AttributeError, or embedding the text of the original exception in the new exception message). When raising an exception in Python 2, use raise ValueError(‘message’) instead of the older form raise ValueError, ‘message’. The latter form is not legal Python 3 syntax. The paren-using form also means that when the exception arguments are long or include string formatting, you don’t need to use line continuation characters thanks to the containing parentheses. When catching exceptions, mention specific exceptions whenever possible instead of using a bare except: clause. For example, use: try: import platform_specific_module except ImportError: platform_specific_module = None A bare except: clause will catch SystemExit and KeyboardInterrupt exceptions, making it harder to interrupt a program with Control-C, and can disguise other problems. If you want to catch all exceptions that signal program errors, use except Exception: (bare except is equivalent to except BaseException:). A good rule of thumb is to limit use of bare ‘except’ clauses to two cases: If the exception handler will be printing out or logging the traceback; at least the user will be aware that an error has occurred. If the code needs to do some cleanup work, but then lets the exception propagate upwards with raise. try…finallycan be a better way to handle this case. When binding caught exceptions to a name, prefer the explicit name binding syntax added in Python 2.6: try: process_data() except Exception as exc: raise DataProcessingFailedError(str(exc)) This is the only syntax supported in Python 3, and avoids the ambiguity problems associated with the older comma-based syntax. When catching operating system errors, prefer the explicit exception hierarchy introduced in Python 3.3 over introspection of errno values. Additionally, for all try/except clauses, limit the try clause to the absolute minimum amount of code necessary. Again, this avoids masking bugs. Yes: try: value = collection[key] except KeyError: return key_not_found(key) else: return handle_value(value) No: try: # Too broad! return handle_value(collection[key]) except KeyError: # Will also catch KeyError raised by handle_value() return key_not_found(key) When a resource is local to a particular section of code, use a with statement to ensure it is cleaned up promptly and reliably after use. A try/finally statement is also acceptable. Context managers should be invoked through separate functions or methods whenever they do something other than acquire and release resources. For example: Yes: with conn.begin_transaction(): do_stuff_in_transaction(conn) No: with conn: do_stuff_in_transaction(conn) The latter example doesn’t provide any information to indicate that the enter and exit methods are doing something other than closing the connection after a transaction. Being explicit is important in this case. Be consistent in return statements. Either all return statements in a function should return an expression, or none of them should. If any return statement returns an expression, any return statements where no value is returned should explicitly state this as return None, and an explicit return statement should be present at the end of the function (if reachable). Yes: def foo(x): if x >= 0: return math.sqrt(x) else: return None def bar(x): if x < 0: return None return math.sqrt(x) No: def foo(x): if x >= 0: return math.sqrt(x) def bar(x): if x < 0: return return math.sqrt(x) Use string methods instead of the string module. String methods are always much faster and share the same API with unicode strings. Override this rule if backward compatibility with Pythons older than 2.0 is required. Use ‘’.startswith() and ‘’.endswith() instead of string slicing to check for prefixes or suffixes. startswith() and endswith() are cleaner and less error prone. For example: Yes: if foo.startswith('bar'): No: if foo[:3] == 'bar': Object type comparisons should always use isinstance() instead of comparing types directly. Yes: if isinstance(obj, int): No: if type(obj) is type(1): When checking if an object is a string, keep in mind that it might be a unicode string too! In Python 2, str and unicode have a common base class, basestring, so you can do: if isinstance(obj, basestring): Note that in Python 3, unicode and basestring no longer exist (there is only str) and a bytes object is no longer a kind of string (it is a sequence of integers instead) For sequences, (strings, lists, tuples), use the fact that empty sequences are false. Yes: if not seq: if seq: No: if len(seq): if not len(seq): Don’t write string literals that rely on significant trailing whitespace. Such trailing whitespace is visually indistinguishable and some editors (or more recently, reindent.py) will trim them. Don’t compare boolean values to True or False using ==. Yes: if greeting: No: if greeting == True: Worse: if greeting is True: Function AnnotationsWith the acceptance of PEP 484, the style rules for function annotations are changing. In order to be forward compatible, function annotations in Python 3 code should preferably use PEP 484 syntax. (There are some formatting recommendations for annotations in the previous section.) The experimentation with annotation styles that was recommended previously in this PEP is no longer encouraged. However, outside the stdlib, experiments within the rules of PEP 484 are now encouraged. For example, marking up a large third party library or application with PEP 484 style type annotations, reviewing how easy it was to add those annotations, and observing whether their presence increases code understandability. The Python standard library should be conservative in adopting such annotations, but their use is allowed for new code and for big refactorings. For code that wants to make a different use of function annotations it is recommended to put a comment of the form: # type: ignore near the top of the file; this tells type checker to ignore all annotations. (More fine-grained ways of disabling complaints from type checkers can be found in PEP 484.) Like linters, type checkers are optional, separate tools. Python interpreters by default should not issue any messages due to type checking and should not alter their behavior based on annotations. Users who don’t want to use type checkers are free to ignore them. However, it is expected that users of third party library packages may want to run type checkers over those packages. For this purpose PEP 484 recommends the use of stub files: .pyi files that are read by the type checker in preference of the corresponding .py files. Stub files can be distributed with a library, or separately (with the library author’s permission) through the typeshed repo [5]. For code that needs to be backwards compatible, type annotations can be added in the form of comments. See the relevant section of PEP 484 [6]. Variable annotationsPEP 526 introduced variable annotations. The style recommendations for them are similar to those on function annotations described above: Annotations for module level variables, class and instance variables, and local variables should have a single space after the colon. There should be no space before the colon. If an assignment has a right hand side, then the equality sign should have exactly one space on both sides. Yes: code: int class Point: coords: Tuple[int, int] label: str = '' No: code:int # No space after colon code : int # Space before colon class Test: result: int=0 # No spaces around equality sign Although the PEP 526 is accepted for Python 3.6, the variable annotation syntax is the preferred syntax for stub files on all versions of Python (see PEP 484 for details). Footnotes | [7] | Hanging indentation is a type-setting style where all the lines in a paragraph are indented except the first line. In the context of Python, the term is used to describe a style where the opening parenthesis of a parenthesized statement is the last non-whitespace character of the line, with subsequent lines being indented until the closing parenthesis. | References| [1] | PEP 7, Style Guide for C Code, van Rossum | | [2] | Barry’s GNU Mailman style guide http://barry.warsaw.us/software/STYLEGUIDE.txt | | [3] | Donald Knuth’s The TeXBook, pages 195 and 196. | | [4] | http://www.wikipedia.com/wiki/CamelCase | | [5] | Typeshed repo https://github.com/python/typeshed | | [6] | Suggested syntax for Python 2.7 and straddling code https://www.python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code | CopyrightThis document has been placed in the public domain. Source: https://github.com/python/peps/blob/master/pep-0008.txt 其他翻译版本： http://nanshu.wang/post/2015-07-04/ https://lizhe2004.gitbooks.io/code-style-guideline-cn/content/python/python-pep8.html https://alvinzhu.xyz/2017/10/07/python-pep-8/]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>knowledgebase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的"北漂"见闻]]></title>
    <url>%2FS%E9%9A%8F%E7%AC%94-%E6%88%91%E7%9A%84%E2%80%9C%E5%8C%97%E6%BC%82%E2%80%9D%E8%A7%81%E9%97%BB%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;2013年，为了能有更多的时间陪陪女友和家人，我申请到了在北京一家德企的实习职位。于是从那年的6月起，我回国开始了为期6个月的“北漂”生活。 &emsp;&emsp;“北漂”的大部分时间里，我都是借宿在高中好友家（说到这非常感谢舍霸同学）。期间有几次因为好友家人来京等原因，我自己在外边找了几处短期的落脚点。这些地方的住宿条件都没法和好友家相比，不过倒是让我有机会看到了各种各样的北漂族的生活。 人人都有幸福的权利&emsp;&emsp;我找的第一个房子是通过代理公司，看房子的时候代理说这房子一共住了5个人。当时其他住户都没在，我也没法核实，后来等我住进去，才发现里边算上我实际有8个人，大家就这样住在一个小两室一厅的房子里。我租的次卧算是最大的，只我一个人住，其他人分散在主卧、主卧的厕所以及两个类似储物间的小房间里。 &emsp;&emsp;我和其中一对年轻夫妇聊的比较多，他们住在离我最近的那个小房间。房间里只能放下一张稍微宽一点的单人床，再没有别的空地了。吃饭的时候他们会搬一张小桌子放在门口，然后坐在靠近门口的床沿上吃。有一次那姐姐说很羡慕我一个人可以住那么大的房间，她说他们以前住在地下室，后来因为皮肤过敏所以迫不得已搬到了现在住的这个房子，这他们都觉得很贵了。他们的孩子还在农村由爷爷奶奶带着，他们在外打工挣钱，生活上能省就省。 &emsp;&emsp;有天晚上大哥来敲我的门，我开开门看见他端着一盘生日蛋糕，非常开心地跟我说:”今天我媳妇生日，跟大家一起庆祝一下。”我边道谢边拿了一块，他便又乐呵呵地去其他人那里送蛋糕了。大家陆陆续续出来拿蛋糕、道谢还有送上生日祝福。那是我难得的一次看到屋里所有人出来，也是很少的几次看到他们夫妻二人那么开心。不需要什么KTV和大餐，只要懂得生活，便会让人内心充满幸福。换句话说，不管物质上过得怎么样，你都有权利感受幸福。 大城市里小小的奋斗[此处请脑补周杰伦版《蜗牛》] &emsp;&emsp;后来我搬去了别的地方的一个小房间，房子里只放得下一张床和一张小桌子。不过因为同住的只有一对母女，而且房间很整洁安静，我毫不犹豫的就搬过来了。 &emsp;&emsp;转租给我房子的是一位只有二十出头、非常开朗的女孩。我打扫房间时看到她贴在墙上勉励自己的各种字条，诸如“本月销售目标 XXXX”,”我要把体重减到XXX”“我一定能做到！”等等。让我想起来本科时候风靡的那些成功学。 &emsp;&emsp;开始的时候觉得有点可笑，可是当我想象着，一个背井离乡的女孩，晚上在这个小小的房间里或盘腿坐着或躺着，憧憬着未来，期盼着靠自己的拼搏和努力在京城做出点成就。想象着她为了实现这样一个”小目标“，不断督促和勉励自己。这又有什么可笑的呢，这样的北漂青年正散落在这个大城市的许多角落，为了更好的未来、为了更好的生活而拼搏。 &emsp;&emsp;我终归不是一个真正的”北漂“，那时我还只是学生，倒更像一个过客，来体验半年就说再见了，没有太多的压力和负担。或许只有真正置身其中，才能更懂他们的生活。 本篇文章原发表于我的微信平台: 豆豆小公主和骑士先生]]></content>
      <categories>
        <category>S随笔</category>
      </categories>
      <tags>
        <tag>北漂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[连载17-不是一个人前进-致谢]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111111-%E8%BF%9E%E8%BD%BD17-%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BA%BA%E5%89%8D%E8%BF%9B-%E8%87%B4%E8%B0%A2%2F</url>
    <content type="text"></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载16-住宿特辑-沙发客]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111110-%E8%BF%9E%E8%BD%BD16-%E4%BD%8F%E5%AE%BF%E7%89%B9%E8%BE%91-%E6%B2%99%E5%8F%91%E5%AE%A2%2F</url>
    <content type="text"></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载15-第十四天-沿着易北河回家]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111109-%E8%BF%9E%E8%BD%BD15-%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9-%E6%B2%BF%E7%9D%80%E6%98%93%E5%8C%97%E6%B2%B3%E5%9B%9E%E5%AE%B6%2F</url>
    <content type="text"></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载14-第十三天-漫游瓷器之都]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111107-%E8%BF%9E%E8%BD%BD14-%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9-%E6%BC%AB%E6%B8%B8%E7%93%B7%E5%99%A8%E4%B9%8B%E9%83%BD%2F</url>
    <content type="text"></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载13-第十二天-怀着期待赶路]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111102-%E8%BF%9E%E8%BD%BD13-%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%A4%A9-%E6%80%80%E7%9D%80%E6%9C%9F%E5%BE%85%E8%B5%B6%E8%B7%AF%2F</url>
    <content type="text"></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载12-第十一天-在湖边感受大海]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111031-%E8%BF%9E%E8%BD%BD12-%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9-%E5%9C%A8%E6%B9%96%E8%BE%B9%E6%84%9F%E5%8F%97%E5%A4%A7%E6%B5%B7%2F</url>
    <content type="text"></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载11-第十天-会师“后勤中心”]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111024-%E8%BF%9E%E8%BD%BD11-%E7%AC%AC%E5%8D%81%E5%A4%A9-%E4%BC%9A%E5%B8%88%E2%80%9C%E5%90%8E%E5%8B%A4%E4%B8%AD%E5%BF%83%E2%80%9D%2F</url>
    <content type="text"></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载10-第九天-超乎想象的信任]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111023-%E8%BF%9E%E8%BD%BD10-%E7%AC%AC%E4%B9%9D%E5%A4%A9-%E8%B6%85%E4%B9%8E%E6%83%B3%E8%B1%A1%E7%9A%84%E4%BF%A1%E4%BB%BB%2F</url>
    <content type="text"></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载9-第八天-突遇暴雨的奇遇]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111018-%E8%BF%9E%E8%BD%BD9-%E7%AC%AC%E5%85%AB%E5%A4%A9-%E7%AA%81%E9%81%87%E6%9A%B4%E9%9B%A8%E7%9A%84%E5%A5%87%E9%81%87%2F</url>
    <content type="text"><![CDATA[2011年9月11日 周日Magdeburg — Dessau理论行程：60公里天气:晴–暴雨/冰雹 漫步Magdeburg今天的目的地Dessau并不远，所以我和朋友们都睡了个懒觉。十点多的时候host准备好了麦片和冷牛奶，吃完早饭我们就要分头行动了：host要去参加足球比赛、另一位沙发客要回家了、我也得踏上新的征程。 Host家的荷兰猪，一共有三只，看看你能找到几只？ 离开host家我准备按着他们的推荐先去参观一下这里著名的Dom（大教堂）。 左边是纪念一次大游行的纪念碑，地上的大理石上写着“Wir sind das Volk”右边是一块柏林墙以及维修中的Dom Dom内景，第一次在教堂里看到餐厅 教堂的锁和门把手，超有感觉 另一座类似教堂的建筑，只是在门口看了一眼 一座很有意思很卡通的建筑，前边的圆柱结构本来就是斜的 这是马德堡居里克大学对面纪念马德堡半球实验的雕塑，作为一个工科男，觉得见到这个雕塑就算是真正到过了马德堡了。正好也到了中午12点半，我得继续向Dessau进发了。 突遇暴雨的奇遇“后勤中心”昨天发短信告诉我今天下午有雨，不过一路上天气都非常晴朗，我也没把下雨的事情放在心上，估计德国的天气预报也会有失误的时候。 不到五点我就到达了Dessau，觉得时间还很早，便慢慢先在城市里转了一下，等晚上见到host的时候还可以和他聊聊他所在的城市。因为听说Dessau的host给我留了言，告诉我从火车总站该如何到他家，想必他家就在火车总站不远的地方，我也没向“后勤中心”具体问路线，只问了一下host家的地址，就边漫步边往火车总站方向前进。 散了半个小时的步然后开始找人问路，问了几个人都说没听过我要去的路名。我又继续找其他的路人询问，但还是没有人知道。看来这位host家并不在火车总站附近啊，还好看到附近有几位汽车司机在聊天，我赶紧去问问他们，或许他们会知道。结果这几位司机也全都没听说过这条路，他们决定用GPS帮我搜索一下。看着GPS显示的结果，我真有些后悔没提前把路线问清楚，host家所在的位置就在我来Dssau的路上，是一个村庄，距离Dessau市中心有八九公里，这回我又得走冤枉路骑回去了。和几位司机道谢后我连忙往回赶，现在才不到六点，天色却已经暗了下来。我越骑越觉得时间紧迫，天很快就完全阴了、同时风也越刮越大，感觉瞬间就从夏天进入了深秋。眼看着就要下雨了，我也愈发心急，过十字路口转向转得太厉害，好险连人带车扑到在地上，所幸用脚支撑住了。乌云铺天盖地般弥散开来，诡谲的形状令人不得不联想到“黑云压城城欲摧”，而乌云背后掩映的是不断的闪电。此时我已经从心急转为担忧，同时又被这大自然的奇观所吸引。想要停下拍几张照片留念，却担心误了赶路要被雨淋；如果不记录一下，又觉得甚为遗憾。再三思考之后决定冒一次险，旅行途中第一次边骑车边拍照，而且是在刚刚下坡之后时速30公里左右的情况下，左手握把，右手慢慢的完成打开相机包、拿出相机、开机、拍照一系列动作。勉勉强强拍了几张，虽然大部分都没对好焦，而且抖动的比较厉害都模糊了，但还是记录了那珍贵的一幕。 诡谲的形状，压城的黑云 漫天铺散开来，却正是我前进的方向 这张是往相机包放相机的时候无意中拍的，但是很贴合我当时的心境 沿着这条自行车道一直骑，骑到尽头发现再往前走又要进入森林了，但依然不见前方有什么住户。这时已经有零星的雨滴飘落在脸颊，我决定不继续往前走了，返回到刚才看到的最近的房子去躲雨，已经管不上是住户还是停车棚还是厂区了，只要是一间房子、能躲雨，我就知足。刚一转身，惊喜的发现原来在我身后有条分岔路，刚刚骑得太急居然没看到，而路边上一个大大的路牌标明正是host家所在的村子。这真是喜出望外，但是高兴不能太早，雨已经开始下大了，我赶紧推着车子往最近的一户人家跑。这回真得敲陌生人家的门了，确实是迫不得已。这里虽然是个村子，但是家家都住得非常好，我觉得比在城市里舒服多了，每户都是别墅和很大的院子，我跑到他们的院子门口边喊“Entschuldigung（打扰）”边找门铃，可是连着找了几家都没找到门铃，我的声音也被雨声掩盖了，自己都能听到雨滴打在头盔上啪啦啪啦的声音，估计里边的人听不到我的呼喊。终于走到第四家或者第五家的时候，刚好屋里有人在拉窗帘，而且我也看到了门铃，就一边卯足了劲大喊“Entschuldigung”一边猛按门铃。女主人看到我之后也顾不上拉窗帘了，叫着她的孩子一起赶紧把房门打开，招呼我快进去。可是院子也有一道门，我怎么也推不开。因为雨已经很大了，他们也出不来，就使劲给我指门锁的位置，我打开门后推着自行车一个箭步冲到房前。进门前还是准备先询问一下希望能把自行车也带进去，没等我问完他们就帮着我把自行车搬进了屋里。呼，我大喘了一口气，摘下眼镜一把抹去脸上的雨水，又把眼镜擦了擦重新戴上，这才看清楚他们的脸庞。屋里是一位阿姨，还有一位哥哥和一位姐姐，他们很友好的看着我笑，我想他们和我同样意外和惊喜。阿姨拿来毛巾让我擦干脸和头发，我一再解释说我只是躲一下雨，一会雨停了我就会走的，他们告诉我不用急不用担心，在这慢慢等着就行。因为看到家里都是很整洁的地板，我决定不往里进，一直待在靠近门口的小厅里。不过阿姨很热情的叫我进客厅坐坐，喝点水吃点东西一起聊聊天，并拿来了大浴巾垫在沙发椅上，这样我就不用担心会把沙发椅弄湿了。刚刚坐下就听到外边噼里啪啦的响声，我们都很惊奇会下这么大的冰雹，便一起跑去门口看冰雹，边看边感慨。平静下来后发现这家人的装修十分考究，壁橱里展示着各种精美的酒杯和器皿，房间里还摆设了很漂亮的钟表和灯具，而阿姨和哥哥姐姐也明显是受过良好的教育的文化人。 刚进客厅的时候他们在聊天，语速很快我也没完全听懂，不过大概意思好像是说如果雨停不了的话就让我在他们家里过夜，这只是我的猜测亦或者是我的希望吧？他们和我聊了聊我的骑行，聊到住宿的时候我和他们说我在Dessau有一位host会接待我，是通过Couchsurfing认识的。居然连阿姨都知道Couchsurfing，看来沙发客在欧洲真的是很流行。说起host我真得和他联系一下才行，给他报个平安，拿出手机看到有两个来自host的未接电话，想必他也挺担心我的。奇怪的是我的手机完全没有信号了，重启了几次都没有信号，阿姨说不行就别试了，直接用她家的座机打就行了。打过去没有人接，我们就边聊天边等着host打回来。没多久就有回电了，他们赶紧把电话递给我，我兴奋的说了一声“Hallo！”结果电话那头传来了深沉的男声，明显不是我那只有18岁的host，我赶紧把电话递给身旁的大哥，原来是他父亲打电话回来了。他们三个忽然就笑开花了一般，这个电话来的真是太巧了。大哥和他父亲聊了一会家事，然后边笑边对电话里说：“刚才那个陌生人？他骑车旅行遇到大雨，在咱家避雨等着朋友回电话呢，你偏偏现在打过来！”这时他们三个又一次笑得前仰后合，我也忍不住跟着笑了起来。之后阿姨帮我查了查host家的地址，就在离这里不远的地方，大哥说让我用他的手机再给host打个电话试试。这次真的打通了，我和host聊了一会但是没理解他在说什么，阿姨接过电话帮我跟host说。原来他刚刚在市区打工，过一会就来接我。“一会儿来接我？可是外边下着大雨。”我很惊讶的问阿姨。“没事没事，你就甭管了，安心待在这就行了。”阿姨和大哥如是说。姐姐有时看着我就笑了，我觉得有点尴尬，所以每次见到她和我笑的时候就和她讲一些旅途中的趣闻。（后来到了host家我才发现，之前下雨的时候一片小的花瓣粘在我脸上了，我却一直没发现也没擦掉，我估计那姐姐看我的样子觉得太搞笑了。） 雨渐渐小了，host也赶来了，我们互相认识了一下便一起向这户好心收留我避雨的家庭再三感谢并道别。 “孩子王”原来host是和朋友一起开面包车来的，刚好把我连人带自行车一起接走了。开车的是他的女朋友，车上还有另一个女生，他们三个人今年都是18岁，在他们身上看到的满是青春的生机和活力，每个人都像大孩子一般。我们首先前往host家，路上看到了被刚刚的疾风骤雨刮倒的大树，我心想自己还是多么幸运的，能够及时找到善良的人家避雨。没过多久就到了host家，向他的母亲和弟弟问好之后，他给了我两个选择，让我自己来决定：第一个是留在他家里休息，第二个是跟他还有他的朋友们一起去看电影。我不暇思索的选择了后者，因为这样有更多的时间互相了解。 看我已经决定好了，他便去换了件衣服准备出发，顺便带我参观了一下他的房间。他曾经独自在加拿大落基山脉骑车旅行，所以很关心我的车况，不断问我有没有什么要更换的零件或者需要的工具。之前联系他的时候就听他讲过他也喜欢骑车旅行，对我的骑行计划非常感兴趣，所以今天我一路都预想该怎样给他介绍我的骑行见闻、怎样和他分享骑行中的快乐。不过，很多事情都是不能预期的，就好比在Dessau的沙发客经历跟我的预期完全不同。 离开host家之后我们继续开车前往他的女友家，在路上我教给他们怎么用汉语数数以及在中国怎么用手势表示数字。到达之后我又一次得到了全家人热情的接待，我们一起边吃晚饭边开心地聊天，聊得很多内容都是我在平时生活中很少接触的，比如德国菜、比如德国小孩子最喜欢的动画片。饭后洗了个澡回来看到他们在上网，于是询问host要看的电影是几点的。他说他也不知道，这得问女生。于是我又去问他女友，“几点？咱们是在网上看。”她如是说。嗨，我才明白原来是在家里看电影，我一直都错误的把电影和电影院联系在一起了。在家里更好，还能边看电影边聊天。晚上等到host的另一位朋友来了之后，我们便一起到地下室看电影了。我印象中的地下室从来都是阴冷、潮湿、储物间的代名词，这是头一回见到装修得如卧室般的地下室。在这个温馨的房间里，我们拿出啤酒和可乐、点燃蜡烛、关了大灯一起看了部相当经典的迪士尼电影——《狮子王1》。看电影的过程中我们也有充分的时间聊爱好、聊生活、聊学业。得知他们今年刚刚参加完Abitur（高中毕业会考），马上就要进入大学阶段了，我便拿出优盘给他们展示我今年6月份做的《毕业一周年纪念视频》，还好当时发布的时候就找朋友们帮我翻译一份德文版的，这回刚好可以跟他们一起分享。 突遇暴雨冰雹令今天成为了骑行途中唯一感受到恐惧的一天，同时也赋予了我一次机会去敲开陌生人的家门，而我因此得到了素不相识的德国人及时又热情的帮助。本来我在脑海中模拟了很多遍今晚的“骑行分享会”，而事实上却出乎意料的变成了 “孩子王”和“孩子们”一起看《狮子王》。在host家的经历让我更坚定不要过多预期将要遇到的人和将要发生的事。秉持一颗善良的心、做正确的事，那么一路上都会是美丽的风景、友善的人和开心的故事，即使有过风雨、有过危险和坎坷，最后回忆的时候也一定会是笑着的。 Samboy20.10.2011 顺奉上《毕业一周年纪念视频》德文版：http://v.youku.com/v_show/id_XMjc4ODgxNjE2.html中文版：http://v.youku.com/v_show/id_XMjc4ODgxNDEy.html Flieg, flieg so weit wie du kannst.Pass gut auf dich aufBitte vergiss nicht, dass wir immer an dich denken. 后天请看：《骑行日记 连载10 第九天：超乎想象的信任》]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载8-第七天-一波三折的住宿]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111008-%E8%BF%9E%E8%BD%BD8-%E7%AC%AC%E4%B8%83%E5%A4%A9-%E4%B8%80%E6%B3%A2%E4%B8%89%E6%8A%98%E7%9A%84%E4%BD%8F%E5%AE%BF%2F</url>
    <content type="text"><![CDATA[2011年9月10日 周六Brandenburg an der Havel — Magdeburg理论行程：80.2公里天气:晴 早晨起来吃过早饭收拾了一番，整个房间恢复成昨天刚进来时整洁的模样，我给老板夫妇留了一张纸条，表达了在这里住宿非常舒适和快乐。 按照昨天的“约定”，我把钥匙插在门上，然后开始了新的旅程。今天的目的地是Magdeburg，这里是科学家和市长居里克的故乡，1654年正是他在雷根斯堡为国王斐迪地三世进行了著名的“马德堡半球实验”。 我还不确定晚上能住在哪里，之前本来联系到了Magdeburg的一位host，不过我比原先说好的时间迟到一天，也不确定她还有没有时间接待我了。她今天要出去开车旅游，有可能会让她的丈夫接待我。由于她始终坚持通过网站留言和我联系，所以我们的联系进度很慢，不得不通过“后勤中心”帮我转达信息。我也不太担心，如果今天到达Magdeburg后不能住在她那里，最差的情况下我还可以去青年旅舍。 在今天的故事开始前，让我们先一起看看前往Magdeburg一路上的风景吧。 路上看到的涂鸦 路上的风景 同一时间拍摄的两张照片：以我所在的马路为界，两边是完全不同的景色 下午一点多途径又一个名为Burg的小镇，这个小镇还真是古香古色，有不少11世纪到14世纪之间修建的古建筑。 Burg小镇里的古建筑 一排小房子，除了最左边的废弃了，其他的是不是有点彩色岛的感觉？ 两张放在一起对比很鲜明 又见Elbe，没错，就是流经Dresden的那条Elbe，现在如果逆流而上，我就可以回家了 过了这座桥就逐渐进入Magdeburg市区比较繁华的地段了，然后一波三折寻找住宿的故事就开始上演了。 这时才下午四点多，今天的骑行速度保持得不错。我找到一处阴凉地给“后勤中心”打电话汇报平安并询问今晚的住宿，原来的那家沙发客host已经确定不能接待我了，本来商量让她丈夫接待我的事情也取消了。好在她及时把我的信息发布在Magdeburg沙发客的SOS求助群里，同时也为我联系了她另外的朋友，希望能想办法帮我提供住宿。她给了我一个据称很友好的德国家庭的联系电话和大概的地址，让我到了Magdeburg后直接和这家人电话联系，而且这家人所居住的地方有风车和石塔，风景非常漂亮。 按着她的推荐我给这家人打了电话，不过打了很多遍都没有人接听。我和当地人询问这个地址所在的方位，居然是在很远的一个郊区。此时我还是很期待并且相信这家人能接待我的，我想他们应该是还没有下班。我决定开始向这家人所在的区域前进，这样等到晚上他们下班了回复我电话的时候，我就能够尽快到达他家里。走了几公里之后又觉得这样有点冒险，万一他们不能接待的话我就白骑了这么久，而且再返回市区天黑了也不方便寻找住宿了。关键的问题是：手机马上没有电了。 我赶紧给“后勤中心”又打了个电话，再次查看之后发现Magdeburg还有一位host给我发了消息，不过他得明天晚上才有时间接待我，先管不了那么多，把能记的联系方式都记到纸上，以备不时之需。然后给刚刚看到的这位host打了电话，他说他在上班，得考虑一下，晚上7点半左右会给我回电话。打完这个电话之后手机就开始不断提示电量低，我继续骑了将近十公里，在一个小镇上决定不再前进，就地等待这两位host的回复。掏出手机想看下时间，结果已经没电自动关机了。 我在一个小店铺门口的树荫下停了下来，考虑能不能进去请老板帮我给手机充充电，由于从来没干过这种事，担心会被拒绝。为了给自己充分的时间思考、准备和“酝酿感情”，我在树荫下吃了几个苹果、一包饼干然后看了会Lonely Planet，还是不好意思进去。眼看着过了好一阵子，手机再没电的话恐怕要耽误正事，我一咬牙走进了小店铺，结果是个游戏厅。嘈杂的环境让人很不舒服，我还是主动出来了。推着车走到旁边的一个小酒馆，这回我没多想，把车停好就大胆走进去找到吧台。我和老板问候了一下，和她说我在等一个重要的电话，但是手机刚好没电了。当我提出想要在她这给手机充电的请求时，周围的顾客都向我看了过来，我也说不清是什么样的眼神，可能更多的是好奇吧。老板很爽快的答应了，叫我把手机和充电器都拿给她。就在我出去拿充电器的路上，她和周围的人说：“是个紧急情况！”听那语气似乎带着一些不屑，不过没有办法，谁让我现在真的是紧急情况呢。可是后面发生的事情让我明白完全是自己多想了。老板很热情的出来接应我，帮忙把手机和充电器拿过去。在小酒馆外边的桌子旁喝酒的大叔可能是男老板了，他问我要不要来一杯。我婉言谢绝了，因为从意大利回来之后，我决定一路不再取钱，就靠钱包里剩下的钱一路往下骑，能骑多远骑多远，所以一直都精打细算。老板说他可以免费给我提供水或者咖啡，再一次问我要不要来一杯，可是我觉得已经给别人添了很多麻烦了，又一次婉言谢绝了。女老板给我拿来了报纸和杂志，然后在不忙的时候我们三个人就一起聊天。他们询问了我的骑行计划和今天遇到的困难，并问我如果host不给我回电话我有没有其他的准备，还让我用他们的座机给那位始终联系不上的host继续打电话。我打了一遍还是没人接听，女老板有些不高兴，她觉得这种不接电话的行为很不靠谱，决定自己也去打，然后对着语音留言哇啦哇啦说了一大堆并让我也过去说两句，我只好在留言里留下了我的手机号，希望他看到后及时给我回电话。 刚好男老板有空，我们就一直聊天，各种话题都有：中国、德国、泰国、慕尼黑啤酒节、半球实验……女老板给他又添了几杯啤酒，同时问我要不要来点免费的水或者咖啡，因为确实不想再给他们添麻烦我还是谢绝了。女老板还特意跟我强调：“免费的啊，卡布奇诺！”看我还是笑着摇了摇头，她也只好一摊手做了个鬼脸。 7点多的时候天渐渐黑了下来，我说我再等到7点半，如果还是没有回复的话我就只好去青年旅舍了。想到今天要走夜路，我询问他们在这里晚上一个人走是否安全。和以往得到的答案不同，他们告诉我要多加小心，尤其是一个人。女老板很关心的问我有没有“Pfefferspray（防狼喷雾）”，当时我还不知道这个词的意思便反问她什么是Pfefferspray。她开始给我解释：“就是带在身上的喷雾剂，要是遇到坏人了防身用的。看来你没有，你等着，我把我的给你！”说着她就准备去给我拿防狼喷雾，不过她今天刚好落在车上了。 又过了不到半个小时，答应下班之后回复我的那位host果然给我打电话了，他说今天也能接待我，不过他家里还有另外一位沙发客，问我介不介意。我当然不介意啊，有住的地方就很知足了，他让我等他一会，他会发短信把地址给我。两位老板也为这个消息感到高兴，我们开心的聊着天等着短信，但是这个短信来得真是够慢的，我等了大概20分钟等不及了就又给他打了一个电话，host说马上就写完了。又过了一会我终于收到了短信，难怪他会写那么久，这个短信如同短文一般详细讲述了他家的地址和我到达他家可以选择的交通方式以及如果我坐有轨电车应该在哪站下车。并告诉我到达他家之后应该按哪个门铃，如果找不到的话就再给他打电话。看了这个短信，我真是很佩服他的严谨，虽然我需要的仅仅是一个地址。 女老板把她的笔记本拿出来给我让我自己搜索一下路线，居然有12公里。再三感谢后告别了小酒馆老板我快马加鞭向host家骑去。这是骑行途中第一次夜间赶路，想着老板嘱咐我要注意安全我还是稍有担心，只盼着能尽快安全到达host家。 在陌生的城市夜间骑车果然有很多不便，最重要的就是看不清路牌，所以一路上总要向路人询问。在走了几次冤枉路之后终于锁定了最终的方向，骑了很久之后看到一个很大的路标，指示前方的道路通往Halberstadt。我的host家的地址是在Halberstaedter Strasse，我心想看来要继续往前走，但是我已经骑了很久了，照理来说应该到了啊？另一方面前边的道路变成了双向两车道的公路，而且没有路灯，晚上在这条路上骑车会很危险的，我想了想还是得找路人问一下，即便要继续往前走，我也尽量换一条有路灯的道路。身后的十字路口旁刚好有个德国小伙，我赶紧找他询问。他听了我和他说的地址之后，指着我头顶的路牌笑着说：“这不就是么？”哈哈，原来已经到了。 （注：按着我骑行时候的感受，这边很多的路名都会以它通往的地方来命名。比如Dresden周边很多小地方都会有Dresdener Strasse，而且通常是指向Dresden的。Cottbuser Strasse通常是指向Cottbus的。同样，这个Halberstaedter Strasse也是靠近Halberstadt的。但是规律这个并不是绝对的。） 没过几分钟我就来到了host家楼下，终于找到今天的归宿了，真的非常开心，虽然已经被折腾的很累了。一上楼就受到了host、他的女友以及另一位沙发客的热情欢迎。我和他们聊的非常开心，对彼此生活的地方和文化都充满了兴趣。另一位沙发客的兄弟现在正在中国云南的一个小山村做志愿者教英语，因此我们有非常多的共同话题，我还为他推荐了一些云南的景点，比如丽江、大理等等，请他转达给他的兄弟，以便有空的时候去旅游。Host的女友还拿来了厚厚的相册给我展示他们旅游的相片。晚上我们一起去每人买了两瓶啤酒回来接着聊天，他们真有精神，一直聊到深夜。3点多的时候我已经有点撑不住了，迷迷糊糊快睡着了，可是看他们聊的正开心我也不好打断。最尴尬的是他们经常聊着聊着还突然问我有什么看法，朦胧中的我真是没有看法啊。 从右到左依次为：沙发客host的女友、host、另一位沙发客、我 Samboy08.10.2011 后天请看：《骑行日记 连载9 第八天：突遇暴雨的奇遇》]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载7-第六天-幸好没预定旅馆]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111006-%E8%BF%9E%E8%BD%BD7-%E7%AC%AC%E5%85%AD%E5%A4%A9-%E5%B9%B8%E5%A5%BD%E6%B2%A1%E9%A2%84%E5%AE%9A%E6%97%85%E9%A6%86%2F</url>
    <content type="text"><![CDATA[2011年9月09日 周五Potsdam — Brandenburg an der Havel理论行程：44.2公里天气:晴 Potsdam遗憾计划中这几天的行程都非常短，主要是想攒出时间以便今天在Potsdam停留一上午慢慢地参观和感受这座城市。可惜天公不作美，刚刚收拾好行李想要出门就下起了蒙蒙细雨，渐渐变成小雨然后是中雨，无奈之下只好在青旅的大厅里看看电视。同样无奈的还有那位老爷爷，他不得不在Potsdam多住宿一天，而我因为要在特定的时间赶到之后几个城市的沙发客host家，所以今天必须出发。 找朋友帮我查了下天气预报，得知只有上午有雨。希望真能如此，虽然很遗憾不能在Potsdam漫步，至少可以按期到达Brandenburg an der Havel（哈弗尔河畔勃兰登堡）。 德国的天气预报还真是准，快到12点的时候天空渐渐晴朗起来，雨也渐渐小了。正午刚过没多久雨就停了下来，我马上打包行李准备出发。 为了弥补不能在Potsdam游玩的缺憾，开始的一段路骑得很慢，看到美丽的景色和建筑便停下来欣赏一番。 渐渐地远离了Potsdam市区，真是有些不舍和遗憾，虽然说过自己要做一个旅行者而不是赶路人，但有的时候还是不得不因为限制条件而赶着时间前进，希望以后还能再来。 勃兰登堡州的自行车道 在勃兰登堡州骑车非常安全舒适，因为始终都有自行车道。不论是在城市里还是在城市之间的乡村或者树林中，都不用和机动车共用车道。 来张全景图：Havel河 各种自行车道，左边的图顺便称赞下大大的M，一路上在McDonalds上了好几次免费厕所 还是各种自行车道 左图：路上看见的草垛右图：很明确的自行车路线指示牌 抵达Brandenburg an der Havel 幸好没预定旅馆到达Brandenburg之后先去超市买了一大袋苹果，骑行伊始的时候在路上看到好多苹果树却不好意思摘树上的红苹果，后来骑在树林里真是想吃水果了却怎么也见不到苹果树，干脆现在自己买来解馋。 买完苹果和晚饭后我直奔Lonely Planet上推荐的适合背包客的廉价旅馆Backpacker。 可是今天这家旅馆的办公室不上班，在一群住在这儿的斯洛伐克人的帮助下我得到了两个联系电话。首先给第一个电话打过去结果没有人接听。第二个电话应该是服务员接的，告诉我所有的房间都已经预定满了。正在我准备离开继续寻找其他Pension的时候，最开始没有接通的那个号码给我回电话了，详细地询问了我有几个人、住几个晚上等等信息，然后告诉我他需要问一下才知道，让我稍等片刻。我心想他们都是一家的，应该没有什么希望，不过还是按着他的要求等回复。过了没多久，从旅馆里走出来一位友善的中年大叔，告诉我只有30欧元一晚不包早餐的房间了。我反问他我明明从书上看到这里的床位只有十多元钱的啊。他说他也非常抱歉，那些便宜的房间已经被订满了，只有这间了，不过如果我仍然想住便宜的房间，他可以给我一个推荐。他带我来到旅馆里的地图前，给我介绍了附近的另一个Pension。他详细地为我指出我们的位置和那家旅馆的位置，并一再告诉我应该如何到达那里。我认真听他讲解完之后准备用相机把地图照下来以备参考，这时老板拦住我让我稍等一下，他掏出一把钥匙在地图上指着那家Pension的位置，然后招呼我照相，并笑着和我说：“这样直观多了。”（见上边右图） 告别这位有趣的老板大叔我又去寻找他推荐给我的Pension，我没听清那个Pension的名字，听起来像是《怪物史瑞克》里那个公主的名字：Fiona。好吧，希望善良的Fiona公主能够收留我啊。 虽然这样自嘲，可骑往新Pension的路上还是有点别扭。或许经历这次找Pension遇到客满的情况后我应该改变一下了，还是应该像以前旅游那样，不论去哪玩都先把旅馆预定好，就像老人们常说的“安身立命”，要确保有房子住、有东西吃。可能经历挫折就更期待成长，可是这些成长真的是我们所希望的么？这次骑行之旅本就是想进行一场完全不寻常的探索，一个人、不预定旅馆、不刮胡子、尝试沙发客、准备尝试睡火车站睡机场甚至想去试着敲开陌生人的家门请求借宿或者有偿住宿，成长之后会少了很多磕磕碰碰，但也许同样会失去很多想象不到的快乐。哎，我自己也不确定了。拐了几个大弯之后无意中看到老板大叔跟我说的路名，沿着骑了没多久就看到了那家Pension，原来是叫Gerono。 虽然见到女老板的第一眼就知道她是一个开朗而善良的人，但是非常遗憾，这里只剩下35欧元一晚上的房间了，还不如刚才那家便宜。我和老板说我是一个骑车旅行者，现在没有太多预算了，想和她讲讲价。她看了看门口的车和行李，跟我说她会帮我想想办法。她马上给朋友们打电话，说要帮她的顾客找一个便宜的房间。一番询问之后女老板给了我另外两家Pension的联系电话，我看了一下跟她说我正是其中一家的老板推荐过来的。她告诉我另一家的价钱是26欧元，比她这便宜9欧元，如果我愿意的话可以去那家。我拿着写好电话号码的纸条向她致谢准备出去给那家Pension打电话。她示意我不要走，她说她会帮我联系好的。接下来女老板打了一通很愉快的电话，最有意思的是电话那边和女老板说了一个地址，女老板恍然大悟一般的感叹：“嗨，原来你们在那啊！”电话那边又说：“你知道我们这怎么走是吧？”“我还真不知道！”然后她们又吧啦吧啦的研究了半天路线。通完电话老板如释重负般跟我说，已经帮你定好了，你现在就可以去那里，但是我得先告诉你怎么走。 为了便于我理解，她准备给我找一份地图。她先拿出了她的Pension宣传卡上的示意图，结果我要去的地方在这个小小的示意图里找不到；她又拿出一份杂志，在上边找了一个景区图，结果景区图的范围还是太小；她接着翻了好几本不同的宣传手册和杂志，发现那里边的地图都没有标记那家Pension所在的区域。然后她就逐渐开始“抓狂”了，她到处翻资料同时嘴里念念有词，形象一点翻译过来就是：“好烦啊好烦啊！怎么找不到呢！真烦人。”看着她像个孩子一般（而且特别像我的一位大学同学），我真是哭笑不得，我连忙跟她讲找不到真的没关系的，并很真诚地告诉她我已经真的真的非常感激她了，只要她把地址告诉我，我就一定能边骑边问找到那里。其实我本想推荐她谷歌地图搜索一下，不过没说出口，而是称赞她真的非常热心，感谢她帮了我这么大的忙。她说她要再找找，并让我不要客气。她和我说：“你一个人来到这个完全陌生的城市，你在这没有亲人和朋友，所以我必须帮助你！” 又找了一阵子她终于放弃寻找地图，转而开始非常详细的给我讲解如何能到达那家Pension：出门右转，沿着马路一直走，直到过了第二座桥，（一定记得是第二座桥不是第一座桥），过了第二座桥马上右转，转过之后下坡，沿着下坡直到前边分成左右两条路，然后往左转，（记得是往左转），然后沿着河边一直走，走到……她怕我记不清楚特意给我重复了三四遍，并把那家Pension的地址和联系电话都写给我。为了写得好看点便于我看懂，她先写了两遍，觉得写得太潦草所以都扔掉了，直到写了第三遍觉得满意了才交给我。再三感谢之后我开始按着女老板的介绍又出发了，在骑车的路上我反复回想着刚才的一幕幕场景，虽然那家Pension叫Gerono不叫Fiona，但女老板真的像童话里的公主一样善良，而这种善良是发自内心的不是表面的矫揉造作也不是为了让别人满意，她更多的是要做得让自己满意。 最后这家Pension所在的街道叫zu den Eichen，很美的名字，翻译过来应该叫“通往橡树”吧？虽然有点远有点偏，但这里可能才是真正的富人区：每家一栋大房子，甚至是几栋连在一起、家家都有院子都有花花草草猫猫狗狗、除了房子和马路之外都是花草树木。而且最喜欢的是这里大部分相邻的房子都是不同的颜色，看上去真像威尼斯的彩色岛，很美。能在这里生活真是太安逸了！ 在这个小村子里绕来绕去总算是找到了zu den Eichen，找到了我今晚的安身之处。这家的女老板给我简单介绍了一下，反正是厨房、卫生间、电视一应俱全。关键是有烧水壶，可以自己烧开水了，克彬在意大利的时候留给我方便面也能派上用场了。老板让我先交钱，然后明天早上我出发的时候把钥匙插在门上直接走人就行。我问老板：“难道您不过来检查一下屋里的东西吗？”“不用了，靠的是诚信，我们彼此之间。”老板如是说。 当我在屋檐下的桌子旁研究明天的路线时，一位慈祥的老爷爷在院子口满脸堆笑的和我打招呼，他是这家的男主人。他简单问了问我来自哪、在哪上学，又聊了聊中国、聊了聊我的骑行。他问我想不想看看他的木工活。“木工活？”我问。“没错，来，跟我来！”老爷爷招呼我和他一起来到另一个小院子，那里边有一个小房子。一进去我就被眼前琳琅满目的各种工具和大型机器震撼了，哇哦，居然是一个小木工作坊，而且作坊里播放着收音机广播，仿佛回到了几十年前一般。 老爷爷是个很厉害的木匠，十几岁就开始入行做木工活，年轻的时候到处做工程。很多大教堂的木质框架结构还有很多公路的围栏（可能听错了）都是他年轻的时候建造的。他几十年来有个爱好就是自己一个人做木工活，他最近在做一个扶梯。 左图：扶梯的台阶，一看就很结实右图：扶梯的扶手 他还跟我说，这些机器已经有一百多年历史了，现在依然很好用。我去看了看机器的铭牌，果然是历史悠久啊，我禁不住的感叹：这么老的机器我以为只有在博物馆才能见到！ 左图：100多年历史的电锯右图：电锯的铭牌 老爷爷的孙子和孙女在作坊里留下的童真笔迹 看我对这些机器充满兴趣，老爷爷也乐意仔细地给我介绍它们的用途，为了让我充分理解，还让机器运行起来给我看看效果。他还给我讲了这些机器的故事、讲了他的故事。最让我不敢相信的是，这个手工作坊还有我住的那个房子，都是他亲手慢慢建造的。虽然花了很多时间，但也是他爱好的一部分。我指着头顶的一根钢铁横梁问他：“这么重的横梁总得用机械往上搬吧？”他拍了拍自己的肩膀说：“这就是我的机械。”虽然有点将信将疑，不过我还是愿意相信。最后在我的提议下，为老爷爷和他的手工作坊、他伟大的爱好合了张影。 回到我的房间，回想来到Brandenburg一路的遭遇，虽然没预定房间给我带来了很多麻烦、让我不得不多跑了很多路、为旅途增添了很多不确定。但也给了我充足的机会去感受“一切顺利”时无法体会的快乐，我遇到了善良的老板大叔、热情到“抓狂”的女老板、传奇的木匠老爷爷，我还有机会在像威尼斯彩色岛一样美丽的小村子里过夜。 在这样得与失的比较中，下午的问题已经不需要回答了，我也更加坚定，幸好没预定旅馆！ Samboy06.10.2011 后天请看：《骑行日记 连载8 第七天：一波三折的住宿》]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载6-第五天-青年旅舍遇骑友]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111003-%E8%BF%9E%E8%BD%BD6-%E7%AC%AC%E4%BA%94%E5%A4%A9-%E9%9D%92%E5%B9%B4%E6%97%85%E8%88%8D%E9%81%87%E9%AA%91%E5%8F%8B%2F</url>
    <content type="text"><![CDATA[2011年9月08日 周四Berlin — Potsdam理论行程：30.6公里天气:小雨 - 阵雨 从邓兄家出门的时候正下着蒙蒙细雨，看看天上的乌云不算阴沉，想必不会越下越大。在小区的停车棚里对自行车进行了一番检修并给驼包套上防雨罩，我也穿上了雨衣，开始骑行途中的第一次主动雨中行车。 今天首先要去一下勃兰登堡门，飞往意大利之前已经在柏林徒步了一天，该去的景点也大致看了看，不过似乎不和爱车在勃兰登堡门前合影，就不能意味着骑行到过柏林，毕竟它见证了德国的历史和兴衰。 经过Potsdam广场的时候看到一个有偿给游客的护照盖章的老伯伯，印章是模仿当年查理检查点的通行印章制作的，挺有意思。 离开柏林之后我一直沿着公路前往Potsdam，之所以要去这里，因为Potsdam毕竟是勃兰登堡州的首府。著名的敦促日本无条件投降的《波茨坦公告》当年就是在这里发布的，这里还有号称“普鲁士的凡尔赛宫”的无忧宫。 可惜一路上都稀稀拉拉的下着雨，有时下得大了就只能停下来避雨，短短的路程足足骑了一下午。 一处避雨的桥下，左边有几名吹号卖艺的年轻人，欢快的曲子令人心情愉悦 不断的走走停停之后，终于见到了指向Potsdam的路标 左图：可能是个老地标中图：有三个尖塔的小教堂右图：Potsdam界标 Die Glienicker Bruecke, 介绍上说这座连接Berlin和Potsdam的大桥作为德国分裂和统一的标志而世界闻名。它的前身是一座始建于17世纪的木桥。 Potsdam也有勃兰登堡门，不过比起柏林的那座，还是要逊色不少 到了Potsdam的第一件事就是寻找青年旅舍。按着游客中心给的地址，我一路边问边骑。一位慈祥的老奶奶手舞足蹈的给我介绍附近的一座山，据说是很美的山，老奶奶吧啦吧啦说了很多山上的著名景点，紧接着来了句：“虽然没有你们富士山那么美，不过已经非常美了。”好吧，她还是把我当日本人了，不过看她讲得兴奋的样子，我也没好意思纠正她。最后她终于告诉了我该如何找到我想去的青年旅舍，想必这山应该也是当地人的骄傲吧。绕来绕去之后我总算看到了青旅的标志，此时又开始下起了蒙蒙细雨。 就在我进青旅办手续的这一小段时间里，雨越下越大，我赶紧出来把车推进车库。全都整理好之后回到房间，外边已经是瓢泼大雨了，还好及时找到了青旅，不然我就惨了。 窗外下着瓢泼大雨 这家青旅里同样有很多小孩子，不过主要是中学生，可能也是在参加夏令营的。青旅走廊的墙上挂着小黑板和小书包等作为装饰，右下角圆锥形的物品是每年小学开学时，由政府赠送给新入学的孩子的礼物，叫做Zuckertueten（糖袋），里边主要是糖果和学习用品等。这一传统起源于19世纪初德国东部的萨克森州和图林根州，并逐步推广到其他地区。 因为有国际青旅的会员卡（据某些青旅说是这个原因，我也不确定），我一路都可以住到单人间或者只有我一个客人的双人间。虽然我也希望能多和别人交流一下，但骑车毕竟辛苦，有时很早就睡了，所以能住个单人间还是挺好的。这家青旅给我提供的是四人间的2号床，空空的四人间为什么不给我1号呢？反正只有我一个人，便把要用的行李随意的铺散开放在房间里，然后下楼花2欧元买了一个小时的网络使用权限以便联系沙发客host。这次我尝试着给Magdeburg、Dessau和Halle的host发了信息，详细说明了我的骑车行程，解释一路上使用网络并不方便，希望他们能理解我现在的处境直接给我打电话。（注：为了保护沙发客们的安全，原则上沙发客之间的联系都是直接在沙发客网站上进行的，所有的联络信息都会被系统存档保管。直接通过电话联系会增加一些风险。） 回到房间和我的“后勤中心”聊天，正通着电话，一位老爷爷打开了房门，这就是我的室友，1号。 虽然很诧异这个房间并不只有我一个人，还是赶紧为他清理出一个床位，他看到的我驼包，微笑着问：“你骑自行车？”我自豪的回应了他，此时我刚好看见他的驼包，所以追问一句：“您也是骑自行车吗?”“我骑的摩托车。”好吧，不管怎么样，我遇到了一位骑友。看见他的骑行服上还滑动着雨水，想必刚才被大雨淋了的。交谈中才知道，他今天从Dresden骑摩托出发先到了Berlin然后到的Potsdam，这就是差距啊，这段路程我都骑了5天了。 他年轻的时候就喜欢旅游，那个时候还是开汽车旅游，也走了很多城市。不过后来他喜欢上了骑摩托车旅游，因为汽车太大，很多地方不能到达，而摩托车的线路就灵活多了。他说：“但是，骑摩托车要是遇到下雨就麻烦了，像我今天一样。”然后像个孩子般冲着我苦笑一番。没过多久我就接到两位host打来的电话，一位是在Dessau的18岁的大男孩，他说他也喜欢骑车，曾经一个人在加拿大骑车旅行；一位是在Halle的中年男子，他对中文和我的骑行经历非常感兴趣。他们都愿意接待我，并且给我留了电话和地址，让我到了地方直接联系他们就好。真是太开心了，一下子解决了两天的住宿问题。 我继续和老爷爷聊我们各自的骑行计划，他的下一站也是到Brandenburg an der Havel，我从Lonely Planet上看到的旅店也正是他预定的那家。他随身带了一个收音机，从进门就一直开着，不过是很小的声音，就当背景音乐了。我询问了一下他一般几点起床，并且告诉他第二天如果我起来早的话不会影响到他的，但是说这话时没组织好语言，说了半天他好像似懂非懂。 晚上我去洗了个澡，出来的时候老爷爷没在房间，应该是去修理他的摩托车了，我打算先铺好被子然后写篇日记。不过令我诧异的是青年旅舍发给我的床单、被罩和枕巾等床上用品通通不见了！我明明放在我这边床的上铺，居然没了，我在房间里找来找去也找不到。这下可麻烦了，如果真的没有了也不知道要让我赔偿多少钱。我静下心来仔细回忆了一番，确认自己把床单拿回来并放到我的床上了。接下来又仔仔细细地在房间里寻找了两遍，结果只看到了老爷爷床上有一套床单，那应该是他的啊，可是我的呢？我开始对“床单门”展开各种假设，难道刚才他没理解我的意思，以为我唐突地要求他明早不要打扰我，因此他生气了？因为他生气了所以给我把床单藏起来了？在很短的时间内我否定了这种可笑的逻辑，可是却也提不出新的假设。比起把别人想得诡计多端，我更愿意把别人想得好一点。而且将这样的猜想加之于一位同为骑友的和蔼老爷爷，未免太过生硬。即便如此，我还是没有心思写日记了，我坐在房间里一边漫无目的的回忆和思考，一边期待老爷爷快点回来。过了有一阵子他终于回来了，我先是非常有礼貌的再一次向他表明如果第二天我起得早的话不会打扰到他的，并说明因为我担心之前没有表达清楚，所以才又一次谈起此事。他连声回应：“没事的没事的，我能理解。”接下来我又有礼貌的询问他有没有看到我放在上铺的床单，没想到得到了这么戏剧性的答案：老爷爷把他床上的床单拿给我，说：“那这个是你的了？可是我的在哪?”原来他找不到自己的床单了，以为我放在上铺的是他的，并顺手拿到了自己的床上。接下来老爷爷开始在房间里四处寻找他的床单，看得出他也是一头的莫名其妙和不可思议，正像刚刚的我一样。我和他讲在他回来之前我已经找过几遍了，什么都没找到，并建议他想想是否真的把床单拿到房间来了。他坐下来看似认真的想了半天，然后无奈的告诉我：“我明明拿上来了啊，可是放哪了呢？”最终他还是决定下楼去问一下，果然不出我所料，他真的是把床单忘在服务台了。想想刚刚“床单门事件”中被这个老爷爷折腾得坐立不安、想想自己当时的心理过程、想想那个可笑的设想的提出和推翻，再想想老爷爷找不到床单时一头雾水的表情和无奈的讲述，我都忍不住快笑出来了。还好，坚持到最后看到的是一场喜剧，只是剧情太悬疑。 Samboy03.10.2011 后天请看：《骑行日记 连载7 第六天：幸好没预定旅馆》]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载5-第四天-亲人般的陌生人]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111002-%E8%BF%9E%E8%BD%BD5-%E7%AC%AC%E5%9B%9B%E5%A4%A9-%E4%BA%B2%E4%BA%BA%E8%88%AC%E7%9A%84%E9%99%8C%E7%94%9F%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[2011年8月29日 周一Koethen — Berlin理论行程：69.3公里天气:晴-阵雨 早晨七点多在鸟儿欢快的叽叽喳喳声中醒来，看到窗外明媚的阳光和翠绿的草木，心情格外舒畅。打开窗子，清新的空气迎面扑来，山里的清晨还是稍微有点冷的，倒是正好可以令人精神抖擞。 餐厅很像小学食堂，在这里我和孩子们共进早餐。坐在我对面的小男孩惊讶的看着我吃了一个又一个面包，感叹道：“你吃得可真多！”我还遇到了四位骑车旅行的中年“姐妹花”，很羡慕她们到这样的年纪还能因为共同的爱好相约一起出行。由于我们骑行的方向刚好相反，我向她们介绍了我一路看到的美丽风景，为她们推荐了沿着湖边的自行车旅游线路。 早上收拾完毕，检修了一下自行车之后我又踏上了新的征程。按照计划，今天我将到达柏林，明天从柏林飞往意大利看望最近刚好在米兰开会的好兄弟克彬，并借机在意大利旅游。顺利到达柏林就意味着本次骑行的第一阶段胜利了，一想到这些，我就不由兴奋起来。 正午时分到达Koenigs Wusterhausen，在这里已经能看到指向Berlin和Potsdam的路标。从这个城市开始，我需要换一份新的骑行图，因此这里具有里程碑一般的意义。 继续赶了一个小时的路，来到了Berlin的外围，我在这个路牌前踌躇了好久也没确定接下来该怎么走：向前过了桥应该是高速了，向右走又要绕路。想了半天还是找了一位路人询问，她建议我先向右转然后再前往Berlin市中心。可是我有些不甘心绕路，等着等着看到一个德国小伙骑着自行车向前方的桥上驶去，看来这条路是允许自行车通行的。于是我放心的向前进发，没想到刚过了前边的红绿灯就突然下起了雨，而且越下越大，为了赶紧找个地方避雨我没太在意过桥之后的岔路口路标，顺势沿着下坡就到了一处高架桥下避雨，这时我才发现我应该是骑到高速路匝道上了。 眼镜上都是雨水 几分钟之后雨就停了，往回骑是逆向行车太危险，我还是决定向前走，心想毕竟汽车都会避让我的，没有什么危险。于是不知深浅的我就这样差点上了高速。刚离开避雨的高架桥就发现情况不对了，后边所有经过的车都会向我鸣笛。开始我还在想，你鸣什么笛啊，我靠边不就得了么。一路上还从没有汽车向我鸣笛过，今天这么多车都鸣笛，看来我真的犯错误了？可怎么办呢？难道往回骑不成？ 正在这个时候一个好心的司机在我身边减下速度，我们一块停了下来。她说我这是非常危险的行为，要求我马上往回走。我说我也想啊，可是骑不回去了吧，逆向。“你必须下车推着往回走，而且要非常小心、注意安全，如果你再往前骑就到高速路了，可能有人要报警了。”既然如此，我只好向她道谢之后按着她的建议和要求小心翼翼靠边往回走，尽管我靠边都靠到草地里了，还是不时有司机向我鸣笛。这次真的很尴尬，我只能故作镇定慢慢推着车走，还好没骑多远，几分钟我就回到了刚才的岔路口。 （由此和车友们共勉，以我为前车之鉴，以后如果有不确定的道路，还是应该找当地人问清楚，不能冒然上路，尤其不能骑车上高速路:-）。） 我有点不知如何是好了，随意翻着地图，想看看是不是错过了什么路线。这时一位德国老奶奶骑着自行车从我身边经过，我连忙叫住她希望能得到一些建议。刚好她家也在我要去的方向，于是我便一路跟随她了。首先我们从人行横道过了马路，然后推着车经过一片草丛中的羊肠小道来到了宽阔的自行车道，走到这里，我就放心多了。我和她讲述了我差点误入高速路的经历，她笑着和我说: “也许你已经出现在交通广播里了。”一路上我们还聊到了我的骑行计划和明天将从Schoenefeld机场坐飞机去意大利旅行。她觉得很有趣，她说她的孩子也喜欢旅游，已经去了很多国家，过一阵子还准备到中国。快到她家的时候老奶奶问我要不要留在家里吃饭，这个邀请对我来说真是太意外太突然了，出于礼貌我还是向她表示我非常乐意但可惜我需要赶到柏林的朋友家里。然后热情的老奶奶又问我需不需要补充一点水，想到自己确实有一个水壶空了，而且刚才已经婉拒过一次她的邀请，所以这回很爽快的答应了，并且很真诚的表示谢意。给我灌满水之后老奶奶又问我需不需要上个厕所，这可问到我心里去了，其实我真有这个想法，不过想到以前听朋友说德国家庭都特别注重卫生间清洁，甚至连男人都得坐着上小便，我有点犹豫。想来想去我反问了一句：“现在离市区还远吗？”其实我是盘算如果不远的话我就再忍一忍，一会找个麦当劳就解决了，不过显然老奶奶觉得我没理解她的意思，又重复了一遍：“我是问你要不要上厕所。”既然她不介意，我还是很开心的去方便了一下，洗完手之后很仔细的把水池擦干净。出来后老奶奶给了我一张纸条，上边是她家的电话和地址，告诉我如果以后还从Schoenefeld机场坐飞机的话，可以提前联系她然后到她家里借宿，因为这个机场就在附近。这简直无法想象，我大概愣了几秒钟的时间来确认是否理解正确，然后忙不迭的道谢和感激。我真不知道该如何感谢才好，最后请求跟她合影作为纪念。 由于从她家到市区还有挺远的距离，老奶奶执意骑车再给我引一段路，以防我绕来绕去迷了路。刚刚我还在岔路口不知所措，现在却有一位慈祥的老奶奶亲自带领我，还不时提醒我小心、慢点，看着她骑车的背影，我心里暖暖的，就像是自己的奶奶带着我一样；我觉得我什么都不怕了：我不用担心会走错路，不用担心不小心违反交通规则，更不用担心会有司机向我鸣笛了；想着想着觉得这样的温馨和感动用文字真的很难描述、也很难用感谢的言语回报，只是忽然觉得鼻尖酸酸的。 骑到一个S-Bahn车站，老奶奶问我是打算乘坐S-Bahn还是继续骑车。当然，我选择了后者。于是她给我指了一条大马路，告诉我还有一些距离，不过只要沿着这条笔直的路一直骑就好了，并祝我一路顺风。临分别时提醒我以后如果有事可以直接给她打电话，我使劲的点头答应。过了马路我再次回头和她挥手告别，而她也一直目送着我直到我上车出发，仿佛真的是亲人在送我远行。 没想到一次误闯高速后会有这般奇遇，为了这无法预想的际遇，我甘愿冒那一点危险，也甘愿“上一次交通广播”。伴着老人的祝福和叮嘱，我开开心心的投奔住在Berlin市区的邓兄。 （接下来8天（8月30日–9月7日）飞往意大利他乡遇故知） Samboy02.10.2011 后天请看：《骑行日记 连载6 第五天：青年旅舍遇骑友》]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载4-第三天-第一位中国客人]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20111001-%E8%BF%9E%E8%BD%BD4-%E7%AC%AC%E4%B8%89%E5%A4%A9-%E7%AC%AC%E4%B8%80%E4%BD%8D%E4%B8%AD%E5%9B%BD%E5%AE%A2%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[2011年8月28日 周日Cottbus — Koethen,Maerkisch Buchholzs理论行程：61.7公里天气:晴 引以为豪的图书馆今天果然是个好天气，睁开眼看到明媚的阳光照进我的房间，便不断暗自庆幸昨天留在Cottbus过夜。早晨在青旅听了一会对面教堂举办的小音乐会，临行前给Gabi发了一条短信感谢她的热情款待，并邀请她以后有机会来Dresden或者中国做客。 昨晚在Gabi家里聊天的时候，她推荐我去Cottbus大学图书馆看看，她说那个图书馆真的是非常漂亮，非常与众不同。看她那么自豪的样子，我答应她我一定会去的，今天离开Cottbus前我得先去履行这个承诺。由于昨晚没问清路线，今天便一路打听，结果居然每一位路人都知道这个图书馆在哪，而且好几位路人都非常自豪地跟我说那里真的是值得一去，告诉我那个图书馆非常非常独特。最开始我还将信将疑，一个图书馆会有这么好看和令人们自豪吗？随着一路上人们的褒奖和推荐，我愈发对这个让Cottbus居民引以为豪的图书馆产生了兴趣，呵，我倒要看看它有多漂亮。 最终我在Cottbus大学里迷路了，无奈之下找到了一位骑自行车的老奶奶问路，结果发现原来我刚才骑过头了，她笑着说：“来，跟我走。”她当起了我的导游，一路为我介绍Cottbus大学和图书馆。在她的带领下我终于来到了那个令Cottbus居民引以为豪的图书馆，独特的建筑风格果然与我见过的所有图书馆都大不相同，全玻璃的外表面配着淡淡的花纹，看上去质朴又不失活泼。我不懂建筑，但是当我来到这里的时候，我还是不由自主的感叹：居然有这么漂亮的图书馆啊！ 老奶奶告诉我，在图书馆左边的草坪上是几块柏林墙，是Cottbus大学找来作为纪念的。我从来没想到，第一次见到柏林墙，却不是在柏林。看到我对图书馆的惊叹和赞美，老奶奶也很开心，毕竟这是他们的骄傲。最令我难忘的是，告别之后老奶奶居然原路返回了，原来她是特意把我带到图书馆来，远远的目送她离去的背影，我心中充满了感激。 恰逢小镇节日按照老奶奶的推荐，我很快就找到了通往Berlin的道路，首先我会经过一个叫做Burg的小镇。一路上最兴奋和期待的，莫过于见到新的路牌和界标，因为每当见到它们，便知道自己离目标越来越近了。 今天恰逢Burg小镇的Heimatfest（故乡节），所以非常热闹，我也被这欢快的氛围所感染，不由得停下了脚步。 许多人都穿上了节日的盛装，或者他们的传统服饰。 一位好心的阿姨主动提议为我和我的自行车照张相，哈哈 离开Burg后没有骑上主路，为了不走回头路我便抄小路按着自行车林间道路路标的指示前进，结果误入乡间小道、农田、牛场和草原。有时路到烂处甚至成了石子路，真是骑得心惊胆战，生怕把车胎扎爆了，终于深刻理解为什么“宁走十里坦，不走一里坎”。还好一路平安，我也享受了非常美丽的乡间风景和清新的空气。 离开Burg之后一条很美的小路，很自然的唱起了《走在乡间的小路上》 上有蓝天白云，下有绿草风车 走错路了误入一片牛场，注意，它们在集体围观我 来张全景图，很喜欢天空一半阴沉一半晴朗的感觉 后来找到一条专门为自行车设计的休闲道路，不过有时会有倒下的大树横在路中间 我终于又一次找到了大路，当我在马路上看到骑士的时候，心想连骑着马都能上主路，我在这骑车更是合乎交通规则了。转念又一想，她们“骑马”在“马路”上走，本来就是合情合理的。她们很配合我拍照，然后我表示毫无压力的超越了正在散步的“骑士”。 第一位中国客人下午4点半左右到达Koethen，今天的目标Halbe就在大约10km远的前方，看看时间还比较早，我决定继续前进。一路上都能看到指向青年旅舍的路标，令我非常放心，既然这边有这么多的国际青旅，我也就不愁住宿了。尤其是当我在一片森林道路中都看到了青旅的路标，我暗自感慨：德国不愧是国际青年旅舍的发源地啊。 可是我高兴得太早了，当我开开心心骑了10km到达目的地Halbe时，当地人告诉我附近唯一的青旅在Koethen，而且我问了几个人得到的都是同样的答案。时间已经不早了，冒昧的继续前进也不是办法，而且附近以森林居多，天黑行车不太安全。所以我只好狼狈的往回走，又是一个10km。我完全没有了刚才的兴奋，忽然有点难过，特别是再一次骑到那片树林的时候，挺伤心的，哎，我又回来了，白走了这么多冤枉路。再一次看到指向青旅的路标，不禁感慨：原来这么多路标指的都是同一家青旅，德国的青旅也不过如此（当然只是一时的气话，呵呵）。 走过的路再一次走就感觉很快，因为都是熟悉的风景。没多久我就回到了Koethen，找到了那家我早就应该到达的青年旅社。一进青旅的大院我看到了十多个围坐在一起聊天的德国小学生，他们见我也很开心，大声的和我打招呼：“空你几哇！”我只好笑着回应：“你们好，但我是中国人。”我一度以为自己走错地方到了小学宿舍，在孩子们的指点下我才看到了青旅的办公室。登记的时候员工告诉我：“你是我们这的第一位日本客人。”我又一次笑着回应：“可我是中国人！”“额…”她重新打开数据库，一番查找之后笑着和我说：“你是我们这的第一位中国客人！”办理好手续之后我开始去把驼包从自行车上卸下来，一个小男孩很关心的过来问我有没有订到房间，然后问我的房间号，看他的样子好像挺希望我能和他们住在一起。这时候孩子们逐渐围了过来，他们很好奇这个黄皮肤的自行车旅行者的行程，当得知我要环德骑行的时候，他们都非常惊讶和佩服，一个小女孩甚至抓着自己的头发说：“啊，我真的不敢相信，他都骑了三天车了，还要继续骑！” 这家青旅是教会组织的小学生夏令营活动的驻地，每年夏天都会有来自全德国不同地方的几十个孩子在此参加活动。或许正是因此，这家青旅的风格特别像幼儿园和小学。 把行李放回房间后我准备去办公室问网络密码，出门时又碰到之前遇到过的两个小女孩。她们很友好地和我打招呼：“空你几哇！”我假装生气说：“我都说了，我是中国人。”她们好像恍然大悟：“是哈，那中国人怎么说‘你好’？”我开始给他们进行简单的汉语知识普及，渐渐孩子们又一次围了过来，一个小女孩用汉语很标准地对我说“你好”，我连忙夸奖她说得很好。她因此很开心，和旁边的小朋友炫耀说她学过一点中文，她很喜欢中文。 有个小女孩不是很友好，不过我想这种不友好来自于她对中国片面的认识，就像很多其他的外国人一样。（当然这不是因为他们不想了解真实的中国，就像我的一个沙发客host说的，我们对彼此国家的了解和认识，主要是通过媒体有政治导向的报道，而沙发客可以让我们更真实的了解对方。）这个小女孩过来就很强硬又近乎没有礼貌地问我有没有吃过小狗，我坚定的告诉她：“没有！”“很好，那小猫呢？”“没有！”“很好，那马呢？”“没有！”“真好，那小壁虎呢？”“也没有！”没错，对于不少外国人，他们甚至从小就认为所有中国人都会吃这些小动物，而这些这些动物尤其是家庭宠物，对外国人有着类似家人一般的意义。听到我一连串的否定回答，她看起来很满意，也渐渐变得友好，我想这时该我说点什么了。我换了一个相对严肃一点的句式和她们讲话：“我想我必须要告诉你们，并不是所有的中国人都会吃这些可爱的小动物的，只有很少一部分人才会这样做。”看得出来，他们对这样的介绍很满意，而且他们很愿意相信这样的事实。消除偏见和敌视，这也是旅行的重要意义。通过旅行，我们能看到更真实的世界，也能把更真实的我们展现给世界。 本想吃了晚饭再去找这些小孩子聊聊天，看看他们还知道怎样的中国，看看是不是还有什么偏见能彼此化解，我也想跟他们学学德语。结果这一天在路上边骑边玩有些累了，收拾了一下东西8点多就睡着了。 睡觉前意外地从青年旅社的地图上发现了一条更近的前往柏林的公路，明天就不用往Halbe方向前进了，也不用再走那条伤心路了，这也算是一件好事！ Samboy01.10.2011 下次请看：《骑行日记 连载5 第四天：亲人般的陌生人》 ================================我叫分割线============================= 真心感谢朋友们对我之前在@汉莎德国的投稿《散步随想-只有出发，才能到达》 http://blog.renren.com/blog/259993468/763677892 的支持。在你们的关系和帮助下，我得到去慕尼黑看球的球票啦^_^。真的非常感谢！我会好好记住你们的好，有事尽管找我。 明天一早我就出发去慕尼黑啦，可能会顺便在慕尼黑玩几天，所以这几天不能每天给大家奉上《骑行日记》的连载了，等回来之后继续和大家分享。祝好！]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载3-第二天-初试沙发客]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20110929-%E8%BF%9E%E8%BD%BD3-%E7%AC%AC%E4%BA%8C%E5%A4%A9-%E5%88%9D%E8%AF%95%E6%B2%99%E5%8F%91%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[2011年8月27日 周六Hoyerswerda — Cottbus理论行程：44公里天气:晴-雨-晴 第一顿德式早餐早上快7点的时候朦朦胧胧从梦中醒来，美美的伸了一个懒腰，都睡了快12个小时了。洗漱完来到餐厅，老板已经为我准备好了早餐。虽说来德国快一年了，不过一直是自己做早餐，这是我的第一顿德式早餐，满桌子都是给我的，还是很丰盛的。以前都是买切片面包，没买过这种要自己烤的面包，所以拿起来就啃。结果发现不知道该怎么处理那些黄油、奶酪和香肠。想来想去还是厚着脸皮和老板请教了一下，才知道要先用餐刀把面包切成两层，哎，有点尴尬。图中就是被我啃了一半的面包。 老板也是个爱聊天的人，我边吃他边和我聊天，我也向他介绍了一番咱们中国的早餐。聊到开心的时候，他又去厨房给我拿了一块蛋糕，让我品尝品尝。 早餐之后找老板要了点盐和糖配点盐水，防止白天出汗太多体内的盐分流失。老板拿起我的水杯直接就在水龙头接水，虽然早就知道德国的家庭用水都是可以直饮的，但是我从来不直接喝，多少还是有些顾虑。所以我特意问他，水龙头的水可以喝吗？他很坚定的告诉我可以，他说这些水是经过检测的，他自己也喜欢直接喝。我忽然很感动，他们居然这么相信检测的结果，那我也入乡随俗了。 小小意外配完盐水之后把自行车检查一番，就准备继续上路了。临行前特意请老板帮我在他的院子前照了张相片作为纪念，这是骑行中我和爱车的第一张合影。 告别了老板我便开始了新的征程。与昨天不同的是，今天的天气非常凉爽，而且一路都是平原，不用像昨天一样翻山越岭。果然应了出发前的想法：坚持过最热最辛苦的第一天，此后的行程真的是一种享受。 左图：仿佛云彩都来自远方那个大烟囱右图：距离Cottbus还有28km时不得不绕道前进 左图：有的时候是要跟机动车共用马路的右图：这条被封锁了的大马路完全属于我，哈哈 今天的行程很短，路上的空气很好、行人很少，所以我一路慢慢悠悠骑着车、唱着歌就来到了Cottbus。已经骑了两天了，平安地在限时速70公里的和不限速的公路上一路骑过来，结果刚进Cottbus郊区就发生了小小意外。 我当时正轻轻松松的哼着歌、看着风景从一户人家的灌木丛前经过，忽然一个高大的德国人骑车从灌木丛边的小道拐出来，跟我撞了个正着。还好我车上驮着重重的驼包而且双方的速度都很慢，不然肯定要被他撞翻。小腿被对方的车前轮蹭了一下，幸亏没伤到骨头只是一点小皮外伤，而他车上不知道是什么零件被我撞得掉到了地上。看到他满脸友善的笑容，我也很心平气和。我们友好的互相询问对方要不要紧，我跟他一起研究被我撞掉的零件是从哪里掉下来的，研究半天也不知道是个什么零件，因此再一次确认对方没有受伤之后我们就微笑着告别了。这种完全没有火药味的小小事故我还真是第一次遇到，不过还是提醒给位车友，在城市道路骑车更要多加小心，因为随时都有可能从小巷子和小路上突然出现行人和车辆。 初试沙发客我也是出发前不久才接触到“沙发客”，这种旅游方式在欧美很流行但对我来说却是全新的。我通过http://www.couchsurfing.org 提前和我将要到达城市的host联系，如果他们刚好有时间并且方便接待我，我就可以在他们家里借宿。这个是完全免费的，在借宿的过程中我们可以互相交流旅游经验、分享自己的人生观和价值观、可以一起做饭吃饭也有可能在host的带领下游览他所在的城市。以后当他们来到我所在的城市，我就成为host接待他们。 这次因为时间比较紧，直到出发的时候我只联系到了骑行第二站Cottbus的一位host。她本来有可能接待我在她家里过夜的，不过刚好从我到达的前一天开始，另一位中国女孩沙发客会一直在她家过夜。 这位host名叫Gabi，人特别好，虽然不能接待我，却希望邀请我去她家吃晚饭聊天。昨天我本计划临时在Hoyerswerda住宿，然后再用两天时间赶到柏林。由于Gabi的邀请，我得再用三天才能骑到柏林，因为需要在Cottbus停留一晚，也因此今天的行程只有不到50公里。最开始我还在想这样就要耽误一天时间还要多花一天的住宿费，不过这个念头在5秒钟之内就被我坚定的打消了，出发前我曾经告诉自己：我是一个旅行者，不是赶路人。没错，我不应该太计较时间和每日的行程，我需要的是尽可能多的和别人交流，去感受不同的文化和风情。 中午便到了Cottbus，按着Gabi给我的信息找到了这里的青年旅社。我去，青年旅社居然还有专门的工作时间，要等到下午5点才可以登记入住。在青年旅社门口简单吃了些点心和香肠，我就推着车开始了小城Cottbus之旅，这时已经开始下起了毛毛雨。 这是Cottbus的标志性建筑Spremberger Turm，这座建于14世纪的Turm的前身是13世纪战争期间的防御塔，登塔后可以俯瞰Cottbus。 建成于1911年的电影院 下午4点多雨逐渐下大了，我赶回青年旅社准备登记入住，然后洗个澡换身衣服等着去Gabi家吃饭。在Gabi家吃饭聊天是非常开心的事情，她和她的朋友还有另一位沙发客都是非常乐观、质朴和健谈的人，我们很谈得来。虽然是第一次见面，他们完全没把我当外人，我也没有陌生感，很快就被她家里欢快的氛围所感染。 我们天南海北的神侃，一会聊沙发客、一会聊旅游经验、一会聊德国、一会聊中国、一会分享各自的经历、一会把焦点集中在Gabi家的三只猫上。我也挺佩服那位中国女生的，她一个人旅游了14个国家的41个城市，最厉害的是她从没住过旅店，一路都是做沙发客。我跟她真是学了不少经验，还拷贝了很多旅游攻略。不知不觉就聊到将近凌晨一点，我不得不回青年旅社休息了。临走的时候送给Gabi一个中国结作为小小的礼物，她特别开心，她已经有两个中国结了，我和她开玩笑说以后她或许可以开个中国结展览。 出门时雨已经停了，夜空中半轮明月清晰可见，明天应该是个好天气啊。其实多亏因为Gabi请我吃饭而留在了Cottbus，如果下午继续赶路的话就要被雨淋了。在这里的停留还令我有充足的时间感受这座小城，这也是我第一次做沙发客、第一次在德国人家里吃饭聊天，做沙发客真是神奇而有趣的旅游方式。 Samboy28.09.2011 明天请看：《骑行日记 连载4 第三天：第一位中国客人》]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载2-第一天-顶着烈日出发]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20110928-%E8%BF%9E%E8%BD%BD2-%E7%AC%AC%E4%B8%80%E5%A4%A9-%E9%A1%B6%E7%9D%80%E7%83%88%E6%97%A5%E5%87%BA%E5%8F%91%2F</url>
    <content type="text"><![CDATA[2011年8月26日 周五Dresden—Hoyerswerda理论行程:67公里天气:晴（烈日啊） 33摄氏度的气温，对国内许多地方来说可能不算什么高温，但是对于德累斯顿来说已经是“极度高温了”，十点之后的阳光逐渐“毒”了起来，紫外线也很强烈。在一个多礼拜前就已经发出预报说24到26日将是最热的三天，德国的天气预报还真是准确，这三天的高温果然如期而至。有朋友劝我晚一天出发，我婉言谢绝了。首先是为了留出足够的时间应对骑行途中的意外，以便在8月30日之前到达柏林。另外我也盘算着，如果我能坚持过最热最辛苦的第一天，此后的每一天对我来说都将是一种享受。 今天起的不算早，吃了早餐之后便开始按照物资清单做最后的核对并且分装行李。没有什么高级装备：没有GPS，也不能用手机随时定位。最重要的导航工具便是那一套全德骑行地图和一张德国行政区图。我一直宽慰自己：如果用GPS的话就太langweilig了。其实也是因为吃不到葡萄所以说葡萄酸吧。不过在骑行途中，这种“最原始”的方式确实极大的锻炼了我的方向感和读图能力，也为我多走很多弯路、多有很多快乐埋下了伏笔。 早上10点多，终于打包完毕，此时室友都去上课了，没人给我照相和送行，只好自己给爱车照张照片留作纪念。 以前虽然经常短途骑车旅游，但是从没有带着驼包骑过车，所以刚出发的时候还有点不太适应。另外我也不太放心驼包的质量，生怕经过坑坑坎坎的时候会把驼包的挂钩颠坏了，所以开始的很长一段路我都骑得小心翼翼、心惊胆战。直到平安出了德累斯顿市区，我终于算是松了一口气，也渐渐放开了脚步。 在德国骑车有一点好处是在市区的公路旁边通常会有专门的自行车道，相对来说比较安全。可是在两座城市之间的无人区或者森林里还是常常要和机动车共用双向两车道的公路。骑着骑着快到树林了看到时速上限70km，想象着要和高速行驶的汽车同行，还真是挺担心。不过也没有其他的路，就硬着头皮尽量靠边骑吧。最害怕的是后边有大卡车经过，当它们疾驶而过时，会有一股强劲的气流冲击过来。为了安全起见，每当我预感后边快有大卡车的时候，就提前靠边停车，拼命站稳扶住单车等着卡车带来的气流过去之后才继续赶路。可总这样也不是办法，我总得走走停停，完全谈不上速度。于是我狠下心来，当再有卡车的时候，我尽量靠边紧握车把低速前进。这时我才发现，如果我停在路边，司机并不理睬我并且会保持高速开车；可是如果我在骑行，司机们尤其是卡车司机会很自觉的减慢车速并且变道超过我，然后再变回原来的车道。如果刚好对向有车不能变道，我身后的司机就会慢慢的跟在我后边，直到能够变道超越我。他们也从不向我鸣笛，虽然对于他们的速度而言，我简直就像一只“蜗牛”。 骑得越久我的胆子也越大了，不再畏惧身后的汽车，有时候还看到他们友好地向我打招呼。骑到树林深处，我才发现，其实限时速70km还不是最刺激的，竟然很多路段是不限速的。早就听说德国的高速路是不限速的，没想到很多公路也不限速，更没想到有一天自己会骑着单车跟不限速的汽车同行。 在森林中小动物频繁出没的地段，常常能见到提醒司机注意保护动物的标志。 有的时候运气好，在树林里也有自行车道，不过有意思的是，这些自行车道在修建的时候常常为了保护树木而修得弯弯曲曲。觉得有趣的同时，也深深佩服德国人对自然的保护。 计划中今天的目的地是距离Dresden有100km远的Cottbus，不过由于第一天骑车，用了很多时间适应驼包和道路，中途也曾经为了寻找近路反而饶了大圈走了很多冤枉路，所以下午4点多才到达距离Cottbus还有44km远的Hoyerswerda，为了保持体力和保证轻松的心态，临时决定在这里过夜。 在Hoyerswerda我找到了一家35欧元一晚并且包早餐的Pension。虽然有点贵，但是环境特别好，落地门窗之外就是老板家的花园，非常安静、空气也非常清新。 本来想顺便在这个小城市转转，结果洗完澡之后忽然哪也不想去了，躺在床上不知不觉睡着了，那时才晚上七点。 （由于第一天没有及时拍照，此篇文章第3、4、5张相片取自之后几天的相册） Samboy28.09.2011 明天请看：《骑行日记 连载3 第二天：初试沙发客》]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[连载1-写在前边的话]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20110927-%E8%BF%9E%E8%BD%BD1-%E5%86%99%E5%9C%A8%E5%89%8D%E8%BE%B9%E7%9A%84%E8%AF%9D%2F</url>
    <content type="text"><![CDATA[只要出发，就能到达；只有出发，才能到达！ 假期伊始的时候本打算参加学校的暑期课程到西班牙学习两周，结果错过了报名时间。任凭做出各种努力也没能争取到一线希望，索性充分利用好这难得的假期做些自己打心底里喜欢的事情。忽然有一天，我告诉自己我要去环德骑行。开始还不确定，环德？地图上写的有三千多公里吧？ 而我是边骑边玩的那种，我喜欢骑到一个城市就在那到处转转，暑假的时间不够啊。但我已经无法抑制踏着单车上路的冲动，天天研究怎么能在这么短的时间内环德骑行，常常苦于时间的紧迫。一次和朋友聊天后豁然开朗：关键的是要上路，至于能骑到哪里，开心就好。于是火速开始购买装备、细化路线，就这样，我开心却又略显匆忙的出发了。临行的前一天，我在facebook上告诉自己：准备出发，一路顺风，fahren-lernen-essen-geniessen-kommunizieren(骑行-学习-美餐-享受-交流)。这也算是这次骑车旅行的宗旨了。走的时候希望自己一路顺风、一切顺利，回来之后却发现：幸好不是一切顺利，所以才有了那么多美好而难忘的回忆。 本来想取名叫《环德日记》，不过这次确实没能环德骑行、也没能按着后来的想法一路骑去慕尼黑看朋友，所以还是诚恳一点叫做骑行日记吧。这次我骑着我的爱车（虽然是一辆只有40欧的二手车）一个人从德累斯顿出发，一路向北骑到柏林，然后从柏林坐飞机去意大利看望我大学最要好的兄弟。在意大利游玩8天之后飞回柏林，继续我的骑行之旅。 骑行途中我一共在11个城市过夜，骑行的路线经过萨克森州、勃兰登堡州、柏林、萨克森-安哈尔特州，地图上的行程有673公里，但是实际的行程应该有将近800公里。全程从没有预定过Pension和JHB，尽量在网上联系当地的沙发客host，争取住在同样热爱旅游、喜欢交流的德国人家中。如果没有当地的host接待，我也是到了目的地才临时找旅馆，所以在路上的时候经常不知道自己晚上会睡在哪里，我时刻做好了准备，想在旅店爆满的情况下尝试去睡火车站或大马路、或者随便敲开一户德国人的家门请求在他家里过夜，可惜一直没有遇到这样的机会。听起来很不可思议吧？居然连旅店都不预定？恩，一个人骑行的旅途本来就是有太多的不可以预知，我希望把这样的未知变得更大，尝试用一种自己完全没有经历过的方法去旅行、去感悟，因此多走了不少弯路，却也发生了更多的故事，遇到了更多的好心人，如果你愿意听，我真的非常乐意慢慢全部告诉你 :-)。 Samboy26.09.2011 明天请看：《骑行日记 连载2 第一天：顶着烈日出发》]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[散步随想-只有出发,才能到达]]></title>
    <url>%2FQ%E9%AA%91%E8%A1%8C%E6%97%A5%E8%AE%B0-20110926-%E6%95%A3%E6%AD%A5%E9%9A%8F%E6%83%B3-%E5%8F%AA%E6%9C%89%E5%87%BA%E5%8F%91-%E6%89%8D%E8%83%BD%E5%88%B0%E8%BE%BE%2F</url>
    <content type="text"><![CDATA[题记： 只要出发，就能到达！—-不仅仅是说旅程。 傍晚出门到附近的小区帮小超拿药，天色不错，于是慢慢散步过去。自从回来之后感觉很久没有一个人静静的想点什么了，迎着小风、伴着绿树、听着偶尔传来的远处孩子们的欢笑，在静谧的小区里一个人享受夕阳的余晖。 不知不觉想到了假期的骑车旅行，想到了刚刚过去的一个学期。刚出发骑行的时候准备其实并不充分，出发的前一天我还在外边买备用配件一直到晚上十点多才回家。有人说我的车太破经不起路途的遥远、有人说那车骑起来太累旅程将非常艰辛、有人说出发的那天正是最热的一天，这些我都不当回事。我唯一担心的是驼包质量不够好半路会坏，毕竟这是ebay上能找到的最便宜的驼包。即便这样，我还是按期上路了。平安骑出了德雷，我便愈发相信自己会成功的，愈发坚信这次骑行将会带给我太多收获。 只要出发，就能到达！没错！只是怎样才算到达？骑行的目的地一改再改，本来坚定的要环德。到了柏林重新审视了骑行的实际时间和去意大利的时间，于是决定从意大利回来之后继续南下到慕尼黑看朋友。意大利回来之后继续骑了两三天发现时间和资金都比我预算的要紧张，所以只能在东德四州环个小圆圈。即便如此还是收获颇丰，关键的问题在于去与不去，这次去不了的，下次还能去。可是如果这次不出发，也许下次也不会出发了。 由此想到了上个学期，常常觉得甚至抱怨做很多事情前没有得到最优条件，得到的只是基本条件。常常在想，如果我有个XXX，我就能XXX；如果我也有XXX，我也能XXX。在这种情绪中浪费了不少时间，甚至很多事情一直拖着没做，只是因为想等个最优条件，结果拖着拖着最后都不想做了。其实很多时候我们并不需要需要最优的条件，或者说在行动的过程中最优条件会慢慢出现。比如暂时没有买到好看的日记本不能成为不写日记的理由：先找个本子或者在电脑里将就写着，买到好看的本子再在本子上继续写。比如买不到想买的书不能成为不看书的理由：先用电子书或者把电子书打印出来一样可以看，等买到那本好书的时候可以再重温一遍书香。有些事情可以等，有些事情却一刻都不能等，因为这些事情会被一拖再拖，那不是等待，而是拖延，是没有尽头的拖延。 只要出发，就能到达！没错。但我们还应该告诉自己：只有出发，才能到达！ samboy25.09.2011]]></content>
      <categories>
        <category>Q骑行日记</category>
      </categories>
  </entry>
</search>
